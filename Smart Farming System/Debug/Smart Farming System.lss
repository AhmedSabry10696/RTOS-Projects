
Smart Farming System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  000023da  0000246e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000544  00800112  00800112  00002520  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002520  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002550  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e8  00000000  00000000  0000258c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000056e0  00000000  00000000  00002974  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000158c  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002bd9  00000000  00000000  000095e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ab4  00000000  00000000  0000c1bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000015f1  00000000  00000000  0000cc70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004002  00000000  00000000  0000e261  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  00012263  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ed       	ldi	r30, 0xDA	; 218
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 35       	cpi	r26, 0x56	; 86
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <main>
      8a:	0c 94 eb 11 	jmp	0x23d6	; 0x23d6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <xEventGroupCreate>:
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	8b e0       	ldi	r24, 0x0B	; 11
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pvPortMalloc>
      9e:	ec 01       	movw	r28, r24
      a0:	00 97       	sbiw	r24, 0x00	; 0
      a2:	31 f0       	breq	.+12     	; 0xb0 <xEventGroupCreate+0x1e>
      a4:	fc 01       	movw	r30, r24
      a6:	11 92       	st	Z+, r1
      a8:	11 92       	st	Z+, r1
      aa:	cf 01       	movw	r24, r30
      ac:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
      b0:	ce 01       	movw	r24, r28
      b2:	df 91       	pop	r29
      b4:	cf 91       	pop	r28
      b6:	08 95       	ret

000000b8 <xEventGroupWaitBits>:
      b8:	af 92       	push	r10
      ba:	bf 92       	push	r11
      bc:	cf 92       	push	r12
      be:	df 92       	push	r13
      c0:	ef 92       	push	r14
      c2:	ff 92       	push	r15
      c4:	0f 93       	push	r16
      c6:	1f 93       	push	r17
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	7c 01       	movw	r14, r24
      ce:	6b 01       	movw	r12, r22
      d0:	a4 2e       	mov	r10, r20
      d2:	b2 2e       	mov	r11, r18
      d4:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
      d8:	f7 01       	movw	r30, r14
      da:	c0 81       	ld	r28, Z
      dc:	d1 81       	ldd	r29, Z+1	; 0x01
      de:	b1 10       	cpse	r11, r1
      e0:	08 c0       	rjmp	.+16     	; 0xf2 <xEventGroupWaitBits+0x3a>
      e2:	81 e0       	ldi	r24, 0x01	; 1
      e4:	9e 01       	movw	r18, r28
      e6:	2c 21       	and	r18, r12
      e8:	3d 21       	and	r19, r13
      ea:	23 2b       	or	r18, r19
      ec:	51 f4       	brne	.+20     	; 0x102 <xEventGroupWaitBits+0x4a>
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	08 c0       	rjmp	.+16     	; 0x102 <xEventGroupWaitBits+0x4a>
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	9e 01       	movw	r18, r28
      f6:	2c 21       	and	r18, r12
      f8:	3d 21       	and	r19, r13
      fa:	2c 15       	cp	r18, r12
      fc:	3d 05       	cpc	r19, r13
      fe:	09 f0       	breq	.+2      	; 0x102 <xEventGroupWaitBits+0x4a>
     100:	80 e0       	ldi	r24, 0x00	; 0
     102:	88 23       	and	r24, r24
     104:	61 f0       	breq	.+24     	; 0x11e <xEventGroupWaitBits+0x66>
     106:	aa 20       	and	r10, r10
     108:	09 f4       	brne	.+2      	; 0x10c <xEventGroupWaitBits+0x54>
     10a:	50 c0       	rjmp	.+160    	; 0x1ac <xEventGroupWaitBits+0xf4>
     10c:	b6 01       	movw	r22, r12
     10e:	60 95       	com	r22
     110:	70 95       	com	r23
     112:	6c 23       	and	r22, r28
     114:	7d 23       	and	r23, r29
     116:	f7 01       	movw	r30, r14
     118:	71 83       	std	Z+1, r23	; 0x01
     11a:	60 83       	st	Z, r22
     11c:	47 c0       	rjmp	.+142    	; 0x1ac <xEventGroupWaitBits+0xf4>
     11e:	01 15       	cp	r16, r1
     120:	11 05       	cpc	r17, r1
     122:	09 f4       	brne	.+2      	; 0x126 <xEventGroupWaitBits+0x6e>
     124:	43 c0       	rjmp	.+134    	; 0x1ac <xEventGroupWaitBits+0xf4>
     126:	aa 20       	and	r10, r10
     128:	19 f0       	breq	.+6      	; 0x130 <xEventGroupWaitBits+0x78>
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	71 e0       	ldi	r23, 0x01	; 1
     12e:	02 c0       	rjmp	.+4      	; 0x134 <xEventGroupWaitBits+0x7c>
     130:	60 e0       	ldi	r22, 0x00	; 0
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	b1 10       	cpse	r11, r1
     136:	74 60       	ori	r23, 0x04	; 4
     138:	6c 29       	or	r22, r12
     13a:	7d 29       	or	r23, r13
     13c:	a8 01       	movw	r20, r16
     13e:	c7 01       	movw	r24, r14
     140:	02 96       	adiw	r24, 0x02	; 2
     142:	0e 94 a2 09 	call	0x1344	; 0x1344 <vTaskPlaceOnUnorderedEventList>
     146:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     14a:	81 11       	cpse	r24, r1
     14c:	02 c0       	rjmp	.+4      	; 0x152 <xEventGroupWaitBits+0x9a>
     14e:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     152:	0e 94 89 0a 	call	0x1512	; 0x1512 <uxTaskResetEventItemValue>
     156:	91 fd       	sbrc	r25, 1
     158:	26 c0       	rjmp	.+76     	; 0x1a6 <xEventGroupWaitBits+0xee>
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	0f 92       	push	r0
     160:	f7 01       	movw	r30, r14
     162:	80 81       	ld	r24, Z
     164:	91 81       	ldd	r25, Z+1	; 0x01
     166:	b1 10       	cpse	r11, r1
     168:	08 c0       	rjmp	.+16     	; 0x17a <xEventGroupWaitBits+0xc2>
     16a:	21 e0       	ldi	r18, 0x01	; 1
     16c:	a6 01       	movw	r20, r12
     16e:	48 23       	and	r20, r24
     170:	59 23       	and	r21, r25
     172:	45 2b       	or	r20, r21
     174:	51 f4       	brne	.+20     	; 0x18a <xEventGroupWaitBits+0xd2>
     176:	20 e0       	ldi	r18, 0x00	; 0
     178:	08 c0       	rjmp	.+16     	; 0x18a <xEventGroupWaitBits+0xd2>
     17a:	21 e0       	ldi	r18, 0x01	; 1
     17c:	a6 01       	movw	r20, r12
     17e:	48 23       	and	r20, r24
     180:	59 23       	and	r21, r25
     182:	4c 15       	cp	r20, r12
     184:	5d 05       	cpc	r21, r13
     186:	09 f0       	breq	.+2      	; 0x18a <xEventGroupWaitBits+0xd2>
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	22 23       	and	r18, r18
     18c:	51 f0       	breq	.+20     	; 0x1a2 <xEventGroupWaitBits+0xea>
     18e:	aa 20       	and	r10, r10
     190:	41 f0       	breq	.+16     	; 0x1a2 <xEventGroupWaitBits+0xea>
     192:	b6 01       	movw	r22, r12
     194:	60 95       	com	r22
     196:	70 95       	com	r23
     198:	68 23       	and	r22, r24
     19a:	79 23       	and	r23, r25
     19c:	f7 01       	movw	r30, r14
     19e:	71 83       	std	Z+1, r23	; 0x01
     1a0:	60 83       	st	Z, r22
     1a2:	0f 90       	pop	r0
     1a4:	0f be       	out	0x3f, r0	; 63
     1a6:	ec 01       	movw	r28, r24
     1a8:	dd 27       	eor	r29, r29
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <xEventGroupWaitBits+0xf8>
     1ac:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     1b0:	ce 01       	movw	r24, r28
     1b2:	df 91       	pop	r29
     1b4:	cf 91       	pop	r28
     1b6:	1f 91       	pop	r17
     1b8:	0f 91       	pop	r16
     1ba:	ff 90       	pop	r15
     1bc:	ef 90       	pop	r14
     1be:	df 90       	pop	r13
     1c0:	cf 90       	pop	r12
     1c2:	bf 90       	pop	r11
     1c4:	af 90       	pop	r10
     1c6:	08 95       	ret

000001c8 <xEventGroupClearBits>:
     1c8:	fc 01       	movw	r30, r24
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	f8 94       	cli
     1ce:	0f 92       	push	r0
     1d0:	80 81       	ld	r24, Z
     1d2:	91 81       	ldd	r25, Z+1	; 0x01
     1d4:	60 95       	com	r22
     1d6:	70 95       	com	r23
     1d8:	68 23       	and	r22, r24
     1da:	79 23       	and	r23, r25
     1dc:	71 83       	std	Z+1, r23	; 0x01
     1de:	60 83       	st	Z, r22
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	08 95       	ret

000001e6 <xEventGroupSetBits>:
     1e6:	af 92       	push	r10
     1e8:	bf 92       	push	r11
     1ea:	cf 92       	push	r12
     1ec:	df 92       	push	r13
     1ee:	ef 92       	push	r14
     1f0:	ff 92       	push	r15
     1f2:	0f 93       	push	r16
     1f4:	1f 93       	push	r17
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	7c 01       	movw	r14, r24
     1fc:	8b 01       	movw	r16, r22
     1fe:	ec 01       	movw	r28, r24
     200:	25 96       	adiw	r28, 0x05	; 5
     202:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
     206:	d7 01       	movw	r26, r14
     208:	17 96       	adiw	r26, 0x07	; 7
     20a:	ed 91       	ld	r30, X+
     20c:	fc 91       	ld	r31, X
     20e:	18 97       	sbiw	r26, 0x08	; 8
     210:	8d 91       	ld	r24, X+
     212:	9c 91       	ld	r25, X
     214:	11 97       	sbiw	r26, 0x01	; 1
     216:	08 2b       	or	r16, r24
     218:	19 2b       	or	r17, r25
     21a:	0d 93       	st	X+, r16
     21c:	1c 93       	st	X, r17
     21e:	ce 17       	cp	r28, r30
     220:	df 07       	cpc	r29, r31
     222:	a1 f1       	breq	.+104    	; 0x28c <xEventGroupSetBits+0xa6>
     224:	00 e0       	ldi	r16, 0x00	; 0
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	bb 24       	eor	r11, r11
     22a:	b3 94       	inc	r11
     22c:	a1 2c       	mov	r10, r1
     22e:	c2 80       	ldd	r12, Z+2	; 0x02
     230:	d3 80       	ldd	r13, Z+3	; 0x03
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	9c 01       	movw	r18, r24
     238:	33 27       	eor	r19, r19
     23a:	92 fd       	sbrc	r25, 2
     23c:	0a c0       	rjmp	.+20     	; 0x252 <xEventGroupSetBits+0x6c>
     23e:	d7 01       	movw	r26, r14
     240:	6d 91       	ld	r22, X+
     242:	7c 91       	ld	r23, X
     244:	62 23       	and	r22, r18
     246:	73 23       	and	r23, r19
     248:	4b 2d       	mov	r20, r11
     24a:	67 2b       	or	r22, r23
     24c:	61 f4       	brne	.+24     	; 0x266 <xEventGroupSetBits+0x80>
     24e:	4a 2d       	mov	r20, r10
     250:	0a c0       	rjmp	.+20     	; 0x266 <xEventGroupSetBits+0x80>
     252:	d7 01       	movw	r26, r14
     254:	6d 91       	ld	r22, X+
     256:	7c 91       	ld	r23, X
     258:	62 23       	and	r22, r18
     25a:	73 23       	and	r23, r19
     25c:	4b 2d       	mov	r20, r11
     25e:	62 17       	cp	r22, r18
     260:	73 07       	cpc	r23, r19
     262:	09 f0       	breq	.+2      	; 0x266 <xEventGroupSetBits+0x80>
     264:	4a 2d       	mov	r20, r10
     266:	44 23       	and	r20, r20
     268:	59 f0       	breq	.+22     	; 0x280 <xEventGroupSetBits+0x9a>
     26a:	90 ff       	sbrs	r25, 0
     26c:	02 c0       	rjmp	.+4      	; 0x272 <xEventGroupSetBits+0x8c>
     26e:	02 2b       	or	r16, r18
     270:	13 2b       	or	r17, r19
     272:	d7 01       	movw	r26, r14
     274:	6d 91       	ld	r22, X+
     276:	7c 91       	ld	r23, X
     278:	72 60       	ori	r23, 0x02	; 2
     27a:	cf 01       	movw	r24, r30
     27c:	0e 94 0e 0a 	call	0x141c	; 0x141c <xTaskRemoveFromUnorderedEventList>
     280:	ec 2d       	mov	r30, r12
     282:	fd 2d       	mov	r31, r13
     284:	ce 17       	cp	r28, r30
     286:	df 07       	cpc	r29, r31
     288:	91 f6       	brne	.-92     	; 0x22e <xEventGroupSetBits+0x48>
     28a:	02 c0       	rjmp	.+4      	; 0x290 <xEventGroupSetBits+0xaa>
     28c:	00 e0       	ldi	r16, 0x00	; 0
     28e:	10 e0       	ldi	r17, 0x00	; 0
     290:	00 95       	com	r16
     292:	10 95       	com	r17
     294:	f7 01       	movw	r30, r14
     296:	80 81       	ld	r24, Z
     298:	91 81       	ldd	r25, Z+1	; 0x01
     29a:	08 23       	and	r16, r24
     29c:	19 23       	and	r17, r25
     29e:	11 83       	std	Z+1, r17	; 0x01
     2a0:	00 83       	st	Z, r16
     2a2:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     2a6:	d7 01       	movw	r26, r14
     2a8:	8d 91       	ld	r24, X+
     2aa:	9c 91       	ld	r25, X
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	1f 91       	pop	r17
     2b2:	0f 91       	pop	r16
     2b4:	ff 90       	pop	r15
     2b6:	ef 90       	pop	r14
     2b8:	df 90       	pop	r13
     2ba:	cf 90       	pop	r12
     2bc:	bf 90       	pop	r11
     2be:	af 90       	pop	r10
     2c0:	08 95       	ret

000002c2 <pvPortMalloc>:
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	ec 01       	movw	r28, r24
     2c8:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
     2cc:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
     2d0:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
     2d4:	89 2b       	or	r24, r25
     2d6:	31 f4       	brne	.+12     	; 0x2e4 <pvPortMalloc+0x22>
     2d8:	87 e1       	ldi	r24, 0x17	; 23
     2da:	91 e0       	ldi	r25, 0x01	; 1
     2dc:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
     2e0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
     2e4:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <xNextFreeByte>
     2e8:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <xNextFreeByte+0x1>
     2ec:	c9 01       	movw	r24, r18
     2ee:	8c 0f       	add	r24, r28
     2f0:	9d 1f       	adc	r25, r29
     2f2:	8f 3a       	cpi	r24, 0xAF	; 175
     2f4:	44 e0       	ldi	r20, 0x04	; 4
     2f6:	94 07       	cpc	r25, r20
     2f8:	70 f4       	brcc	.+28     	; 0x316 <pvPortMalloc+0x54>
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	70 f4       	brcc	.+28     	; 0x31c <pvPortMalloc+0x5a>
     300:	c0 91 12 01 	lds	r28, 0x0112	; 0x800112 <__data_end>
     304:	d0 91 13 01 	lds	r29, 0x0113	; 0x800113 <__data_end+0x1>
     308:	c2 0f       	add	r28, r18
     30a:	d3 1f       	adc	r29, r19
     30c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <xNextFreeByte+0x1>
     310:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <xNextFreeByte>
     314:	05 c0       	rjmp	.+10     	; 0x320 <pvPortMalloc+0x5e>
     316:	c0 e0       	ldi	r28, 0x00	; 0
     318:	d0 e0       	ldi	r29, 0x00	; 0
     31a:	02 c0       	rjmp	.+4      	; 0x320 <pvPortMalloc+0x5e>
     31c:	c0 e0       	ldi	r28, 0x00	; 0
     31e:	d0 e0       	ldi	r29, 0x00	; 0
     320:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     324:	ce 01       	movw	r24, r28
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <vPortFree>:
     32c:	08 95       	ret

0000032e <vListInitialise>:
     32e:	fc 01       	movw	r30, r24
     330:	03 96       	adiw	r24, 0x03	; 3
     332:	92 83       	std	Z+2, r25	; 0x02
     334:	81 83       	std	Z+1, r24	; 0x01
     336:	2f ef       	ldi	r18, 0xFF	; 255
     338:	3f ef       	ldi	r19, 0xFF	; 255
     33a:	34 83       	std	Z+4, r19	; 0x04
     33c:	23 83       	std	Z+3, r18	; 0x03
     33e:	96 83       	std	Z+6, r25	; 0x06
     340:	85 83       	std	Z+5, r24	; 0x05
     342:	90 87       	std	Z+8, r25	; 0x08
     344:	87 83       	std	Z+7, r24	; 0x07
     346:	10 82       	st	Z, r1
     348:	08 95       	ret

0000034a <vListInitialiseItem>:
     34a:	fc 01       	movw	r30, r24
     34c:	11 86       	std	Z+9, r1	; 0x09
     34e:	10 86       	std	Z+8, r1	; 0x08
     350:	08 95       	ret

00000352 <vListInsertEnd>:
     352:	cf 93       	push	r28
     354:	df 93       	push	r29
     356:	9c 01       	movw	r18, r24
     358:	fb 01       	movw	r30, r22
     35a:	dc 01       	movw	r26, r24
     35c:	11 96       	adiw	r26, 0x01	; 1
     35e:	cd 91       	ld	r28, X+
     360:	dc 91       	ld	r29, X
     362:	12 97       	sbiw	r26, 0x02	; 2
     364:	d3 83       	std	Z+3, r29	; 0x03
     366:	c2 83       	std	Z+2, r28	; 0x02
     368:	8c 81       	ldd	r24, Y+4	; 0x04
     36a:	9d 81       	ldd	r25, Y+5	; 0x05
     36c:	95 83       	std	Z+5, r25	; 0x05
     36e:	84 83       	std	Z+4, r24	; 0x04
     370:	8c 81       	ldd	r24, Y+4	; 0x04
     372:	9d 81       	ldd	r25, Y+5	; 0x05
     374:	dc 01       	movw	r26, r24
     376:	13 96       	adiw	r26, 0x03	; 3
     378:	7c 93       	st	X, r23
     37a:	6e 93       	st	-X, r22
     37c:	12 97       	sbiw	r26, 0x02	; 2
     37e:	7d 83       	std	Y+5, r23	; 0x05
     380:	6c 83       	std	Y+4, r22	; 0x04
     382:	31 87       	std	Z+9, r19	; 0x09
     384:	20 87       	std	Z+8, r18	; 0x08
     386:	f9 01       	movw	r30, r18
     388:	80 81       	ld	r24, Z
     38a:	8f 5f       	subi	r24, 0xFF	; 255
     38c:	80 83       	st	Z, r24
     38e:	df 91       	pop	r29
     390:	cf 91       	pop	r28
     392:	08 95       	ret

00000394 <vListInsert>:
     394:	cf 93       	push	r28
     396:	df 93       	push	r29
     398:	eb 01       	movw	r28, r22
     39a:	48 81       	ld	r20, Y
     39c:	59 81       	ldd	r21, Y+1	; 0x01
     39e:	4f 3f       	cpi	r20, 0xFF	; 255
     3a0:	2f ef       	ldi	r18, 0xFF	; 255
     3a2:	52 07       	cpc	r21, r18
     3a4:	21 f4       	brne	.+8      	; 0x3ae <vListInsert+0x1a>
     3a6:	fc 01       	movw	r30, r24
     3a8:	a7 81       	ldd	r26, Z+7	; 0x07
     3aa:	b0 85       	ldd	r27, Z+8	; 0x08
     3ac:	0d c0       	rjmp	.+26     	; 0x3c8 <vListInsert+0x34>
     3ae:	dc 01       	movw	r26, r24
     3b0:	13 96       	adiw	r26, 0x03	; 3
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <vListInsert+0x22>
     3b4:	df 01       	movw	r26, r30
     3b6:	12 96       	adiw	r26, 0x02	; 2
     3b8:	ed 91       	ld	r30, X+
     3ba:	fc 91       	ld	r31, X
     3bc:	13 97       	sbiw	r26, 0x03	; 3
     3be:	20 81       	ld	r18, Z
     3c0:	31 81       	ldd	r19, Z+1	; 0x01
     3c2:	42 17       	cp	r20, r18
     3c4:	53 07       	cpc	r21, r19
     3c6:	b0 f7       	brcc	.-20     	; 0x3b4 <vListInsert+0x20>
     3c8:	12 96       	adiw	r26, 0x02	; 2
     3ca:	ed 91       	ld	r30, X+
     3cc:	fc 91       	ld	r31, X
     3ce:	13 97       	sbiw	r26, 0x03	; 3
     3d0:	fb 83       	std	Y+3, r31	; 0x03
     3d2:	ea 83       	std	Y+2, r30	; 0x02
     3d4:	d5 83       	std	Z+5, r29	; 0x05
     3d6:	c4 83       	std	Z+4, r28	; 0x04
     3d8:	bd 83       	std	Y+5, r27	; 0x05
     3da:	ac 83       	std	Y+4, r26	; 0x04
     3dc:	13 96       	adiw	r26, 0x03	; 3
     3de:	dc 93       	st	X, r29
     3e0:	ce 93       	st	-X, r28
     3e2:	12 97       	sbiw	r26, 0x02	; 2
     3e4:	99 87       	std	Y+9, r25	; 0x09
     3e6:	88 87       	std	Y+8, r24	; 0x08
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 81       	ld	r18, Z
     3ec:	2f 5f       	subi	r18, 0xFF	; 255
     3ee:	20 83       	st	Z, r18
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <uxListRemove>:
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	fc 01       	movw	r30, r24
     3fc:	a0 85       	ldd	r26, Z+8	; 0x08
     3fe:	b1 85       	ldd	r27, Z+9	; 0x09
     400:	c2 81       	ldd	r28, Z+2	; 0x02
     402:	d3 81       	ldd	r29, Z+3	; 0x03
     404:	84 81       	ldd	r24, Z+4	; 0x04
     406:	95 81       	ldd	r25, Z+5	; 0x05
     408:	9d 83       	std	Y+5, r25	; 0x05
     40a:	8c 83       	std	Y+4, r24	; 0x04
     40c:	c4 81       	ldd	r28, Z+4	; 0x04
     40e:	d5 81       	ldd	r29, Z+5	; 0x05
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	93 81       	ldd	r25, Z+3	; 0x03
     414:	9b 83       	std	Y+3, r25	; 0x03
     416:	8a 83       	std	Y+2, r24	; 0x02
     418:	11 96       	adiw	r26, 0x01	; 1
     41a:	8d 91       	ld	r24, X+
     41c:	9c 91       	ld	r25, X
     41e:	12 97       	sbiw	r26, 0x02	; 2
     420:	e8 17       	cp	r30, r24
     422:	f9 07       	cpc	r31, r25
     424:	31 f4       	brne	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     426:	84 81       	ldd	r24, Z+4	; 0x04
     428:	95 81       	ldd	r25, Z+5	; 0x05
     42a:	12 96       	adiw	r26, 0x02	; 2
     42c:	9c 93       	st	X, r25
     42e:	8e 93       	st	-X, r24
     430:	11 97       	sbiw	r26, 0x01	; 1
     432:	11 86       	std	Z+9, r1	; 0x09
     434:	10 86       	std	Z+8, r1	; 0x08
     436:	8c 91       	ld	r24, X
     438:	81 50       	subi	r24, 0x01	; 1
     43a:	8c 93       	st	X, r24
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <pxPortInitialiseStack>:
     442:	31 e1       	ldi	r19, 0x11	; 17
     444:	fc 01       	movw	r30, r24
     446:	30 83       	st	Z, r19
     448:	31 97       	sbiw	r30, 0x01	; 1
     44a:	22 e2       	ldi	r18, 0x22	; 34
     44c:	20 83       	st	Z, r18
     44e:	31 97       	sbiw	r30, 0x01	; 1
     450:	a3 e3       	ldi	r26, 0x33	; 51
     452:	a0 83       	st	Z, r26
     454:	31 97       	sbiw	r30, 0x01	; 1
     456:	60 83       	st	Z, r22
     458:	31 97       	sbiw	r30, 0x01	; 1
     45a:	70 83       	st	Z, r23
     45c:	31 97       	sbiw	r30, 0x01	; 1
     45e:	10 82       	st	Z, r1
     460:	31 97       	sbiw	r30, 0x01	; 1
     462:	60 e8       	ldi	r22, 0x80	; 128
     464:	60 83       	st	Z, r22
     466:	31 97       	sbiw	r30, 0x01	; 1
     468:	10 82       	st	Z, r1
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	62 e0       	ldi	r22, 0x02	; 2
     46e:	60 83       	st	Z, r22
     470:	31 97       	sbiw	r30, 0x01	; 1
     472:	63 e0       	ldi	r22, 0x03	; 3
     474:	60 83       	st	Z, r22
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	64 e0       	ldi	r22, 0x04	; 4
     47a:	60 83       	st	Z, r22
     47c:	31 97       	sbiw	r30, 0x01	; 1
     47e:	65 e0       	ldi	r22, 0x05	; 5
     480:	60 83       	st	Z, r22
     482:	31 97       	sbiw	r30, 0x01	; 1
     484:	66 e0       	ldi	r22, 0x06	; 6
     486:	60 83       	st	Z, r22
     488:	31 97       	sbiw	r30, 0x01	; 1
     48a:	67 e0       	ldi	r22, 0x07	; 7
     48c:	60 83       	st	Z, r22
     48e:	31 97       	sbiw	r30, 0x01	; 1
     490:	68 e0       	ldi	r22, 0x08	; 8
     492:	60 83       	st	Z, r22
     494:	31 97       	sbiw	r30, 0x01	; 1
     496:	69 e0       	ldi	r22, 0x09	; 9
     498:	60 83       	st	Z, r22
     49a:	31 97       	sbiw	r30, 0x01	; 1
     49c:	60 e1       	ldi	r22, 0x10	; 16
     49e:	60 83       	st	Z, r22
     4a0:	31 97       	sbiw	r30, 0x01	; 1
     4a2:	30 83       	st	Z, r19
     4a4:	31 97       	sbiw	r30, 0x01	; 1
     4a6:	32 e1       	ldi	r19, 0x12	; 18
     4a8:	30 83       	st	Z, r19
     4aa:	31 97       	sbiw	r30, 0x01	; 1
     4ac:	33 e1       	ldi	r19, 0x13	; 19
     4ae:	30 83       	st	Z, r19
     4b0:	31 97       	sbiw	r30, 0x01	; 1
     4b2:	34 e1       	ldi	r19, 0x14	; 20
     4b4:	30 83       	st	Z, r19
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	35 e1       	ldi	r19, 0x15	; 21
     4ba:	30 83       	st	Z, r19
     4bc:	31 97       	sbiw	r30, 0x01	; 1
     4be:	36 e1       	ldi	r19, 0x16	; 22
     4c0:	30 83       	st	Z, r19
     4c2:	31 97       	sbiw	r30, 0x01	; 1
     4c4:	37 e1       	ldi	r19, 0x17	; 23
     4c6:	30 83       	st	Z, r19
     4c8:	31 97       	sbiw	r30, 0x01	; 1
     4ca:	38 e1       	ldi	r19, 0x18	; 24
     4cc:	30 83       	st	Z, r19
     4ce:	31 97       	sbiw	r30, 0x01	; 1
     4d0:	39 e1       	ldi	r19, 0x19	; 25
     4d2:	30 83       	st	Z, r19
     4d4:	31 97       	sbiw	r30, 0x01	; 1
     4d6:	30 e2       	ldi	r19, 0x20	; 32
     4d8:	30 83       	st	Z, r19
     4da:	31 97       	sbiw	r30, 0x01	; 1
     4dc:	31 e2       	ldi	r19, 0x21	; 33
     4de:	30 83       	st	Z, r19
     4e0:	31 97       	sbiw	r30, 0x01	; 1
     4e2:	20 83       	st	Z, r18
     4e4:	31 97       	sbiw	r30, 0x01	; 1
     4e6:	23 e2       	ldi	r18, 0x23	; 35
     4e8:	20 83       	st	Z, r18
     4ea:	31 97       	sbiw	r30, 0x01	; 1
     4ec:	40 83       	st	Z, r20
     4ee:	31 97       	sbiw	r30, 0x01	; 1
     4f0:	50 83       	st	Z, r21
     4f2:	31 97       	sbiw	r30, 0x01	; 1
     4f4:	26 e2       	ldi	r18, 0x26	; 38
     4f6:	20 83       	st	Z, r18
     4f8:	31 97       	sbiw	r30, 0x01	; 1
     4fa:	27 e2       	ldi	r18, 0x27	; 39
     4fc:	20 83       	st	Z, r18
     4fe:	31 97       	sbiw	r30, 0x01	; 1
     500:	28 e2       	ldi	r18, 0x28	; 40
     502:	20 83       	st	Z, r18
     504:	31 97       	sbiw	r30, 0x01	; 1
     506:	29 e2       	ldi	r18, 0x29	; 41
     508:	20 83       	st	Z, r18
     50a:	31 97       	sbiw	r30, 0x01	; 1
     50c:	20 e3       	ldi	r18, 0x30	; 48
     50e:	20 83       	st	Z, r18
     510:	31 97       	sbiw	r30, 0x01	; 1
     512:	21 e3       	ldi	r18, 0x31	; 49
     514:	20 83       	st	Z, r18
     516:	86 97       	sbiw	r24, 0x26	; 38
     518:	08 95       	ret

0000051a <xPortStartScheduler>:
     51a:	1b bc       	out	0x2b, r1	; 43
     51c:	8c e7       	ldi	r24, 0x7C	; 124
     51e:	8a bd       	out	0x2a, r24	; 42
     520:	8b e0       	ldi	r24, 0x0B	; 11
     522:	8e bd       	out	0x2e, r24	; 46
     524:	89 b7       	in	r24, 0x39	; 57
     526:	80 61       	ori	r24, 0x10	; 16
     528:	89 bf       	out	0x39, r24	; 57
     52a:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <pxCurrentTCB>
     52e:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     532:	cd 91       	ld	r28, X+
     534:	cd bf       	out	0x3d, r28	; 61
     536:	dd 91       	ld	r29, X+
     538:	de bf       	out	0x3e, r29	; 62
     53a:	ff 91       	pop	r31
     53c:	ef 91       	pop	r30
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	bf 91       	pop	r27
     544:	af 91       	pop	r26
     546:	9f 91       	pop	r25
     548:	8f 91       	pop	r24
     54a:	7f 91       	pop	r23
     54c:	6f 91       	pop	r22
     54e:	5f 91       	pop	r21
     550:	4f 91       	pop	r20
     552:	3f 91       	pop	r19
     554:	2f 91       	pop	r18
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	df 90       	pop	r13
     560:	cf 90       	pop	r12
     562:	bf 90       	pop	r11
     564:	af 90       	pop	r10
     566:	9f 90       	pop	r9
     568:	8f 90       	pop	r8
     56a:	7f 90       	pop	r7
     56c:	6f 90       	pop	r6
     56e:	5f 90       	pop	r5
     570:	4f 90       	pop	r4
     572:	3f 90       	pop	r3
     574:	2f 90       	pop	r2
     576:	1f 90       	pop	r1
     578:	0f 90       	pop	r0
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	0f 90       	pop	r0
     57e:	08 95       	ret
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	08 95       	ret

00000584 <vPortYield>:
     584:	0f 92       	push	r0
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	0f 92       	push	r0
     58c:	1f 92       	push	r1
     58e:	11 24       	eor	r1, r1
     590:	2f 92       	push	r2
     592:	3f 92       	push	r3
     594:	4f 92       	push	r4
     596:	5f 92       	push	r5
     598:	6f 92       	push	r6
     59a:	7f 92       	push	r7
     59c:	8f 92       	push	r8
     59e:	9f 92       	push	r9
     5a0:	af 92       	push	r10
     5a2:	bf 92       	push	r11
     5a4:	cf 92       	push	r12
     5a6:	df 92       	push	r13
     5a8:	ef 92       	push	r14
     5aa:	ff 92       	push	r15
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	2f 93       	push	r18
     5b2:	3f 93       	push	r19
     5b4:	4f 93       	push	r20
     5b6:	5f 93       	push	r21
     5b8:	6f 93       	push	r22
     5ba:	7f 93       	push	r23
     5bc:	8f 93       	push	r24
     5be:	9f 93       	push	r25
     5c0:	af 93       	push	r26
     5c2:	bf 93       	push	r27
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	ef 93       	push	r30
     5ca:	ff 93       	push	r31
     5cc:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <pxCurrentTCB>
     5d0:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     5d4:	0d b6       	in	r0, 0x3d	; 61
     5d6:	0d 92       	st	X+, r0
     5d8:	0e b6       	in	r0, 0x3e	; 62
     5da:	0d 92       	st	X+, r0
     5dc:	0e 94 18 09 	call	0x1230	; 0x1230 <vTaskSwitchContext>
     5e0:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <pxCurrentTCB>
     5e4:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     5e8:	cd 91       	ld	r28, X+
     5ea:	cd bf       	out	0x3d, r28	; 61
     5ec:	dd 91       	ld	r29, X+
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	bf 91       	pop	r27
     5fa:	af 91       	pop	r26
     5fc:	9f 91       	pop	r25
     5fe:	8f 91       	pop	r24
     600:	7f 91       	pop	r23
     602:	6f 91       	pop	r22
     604:	5f 91       	pop	r21
     606:	4f 91       	pop	r20
     608:	3f 91       	pop	r19
     60a:	2f 91       	pop	r18
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	ef 90       	pop	r14
     614:	df 90       	pop	r13
     616:	cf 90       	pop	r12
     618:	bf 90       	pop	r11
     61a:	af 90       	pop	r10
     61c:	9f 90       	pop	r9
     61e:	8f 90       	pop	r8
     620:	7f 90       	pop	r7
     622:	6f 90       	pop	r6
     624:	5f 90       	pop	r5
     626:	4f 90       	pop	r4
     628:	3f 90       	pop	r3
     62a:	2f 90       	pop	r2
     62c:	1f 90       	pop	r1
     62e:	0f 90       	pop	r0
     630:	0f be       	out	0x3f, r0	; 63
     632:	0f 90       	pop	r0
     634:	08 95       	ret

00000636 <vPortYieldFromTick>:
     636:	0f 92       	push	r0
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	0f 92       	push	r0
     63e:	1f 92       	push	r1
     640:	11 24       	eor	r1, r1
     642:	2f 92       	push	r2
     644:	3f 92       	push	r3
     646:	4f 92       	push	r4
     648:	5f 92       	push	r5
     64a:	6f 92       	push	r6
     64c:	7f 92       	push	r7
     64e:	8f 92       	push	r8
     650:	9f 92       	push	r9
     652:	af 92       	push	r10
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	2f 93       	push	r18
     664:	3f 93       	push	r19
     666:	4f 93       	push	r20
     668:	5f 93       	push	r21
     66a:	6f 93       	push	r22
     66c:	7f 93       	push	r23
     66e:	8f 93       	push	r24
     670:	9f 93       	push	r25
     672:	af 93       	push	r26
     674:	bf 93       	push	r27
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	ef 93       	push	r30
     67c:	ff 93       	push	r31
     67e:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <pxCurrentTCB>
     682:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     686:	0d b6       	in	r0, 0x3d	; 61
     688:	0d 92       	st	X+, r0
     68a:	0e b6       	in	r0, 0x3e	; 62
     68c:	0d 92       	st	X+, r0
     68e:	0e 94 7c 07 	call	0xef8	; 0xef8 <xTaskIncrementTick>
     692:	81 11       	cpse	r24, r1
     694:	0e 94 18 09 	call	0x1230	; 0x1230 <vTaskSwitchContext>
     698:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <pxCurrentTCB>
     69c:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     6a0:	cd 91       	ld	r28, X+
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	dd 91       	ld	r29, X+
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	ff 91       	pop	r31
     6aa:	ef 91       	pop	r30
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	bf 91       	pop	r27
     6b2:	af 91       	pop	r26
     6b4:	9f 91       	pop	r25
     6b6:	8f 91       	pop	r24
     6b8:	7f 91       	pop	r23
     6ba:	6f 91       	pop	r22
     6bc:	5f 91       	pop	r21
     6be:	4f 91       	pop	r20
     6c0:	3f 91       	pop	r19
     6c2:	2f 91       	pop	r18
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	7f 90       	pop	r7
     6da:	6f 90       	pop	r6
     6dc:	5f 90       	pop	r5
     6de:	4f 90       	pop	r4
     6e0:	3f 90       	pop	r3
     6e2:	2f 90       	pop	r2
     6e4:	1f 90       	pop	r1
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	08 95       	ret

000006ee <__vector_7>:
     6ee:	0e 94 1b 03 	call	0x636	; 0x636 <vPortYieldFromTick>
     6f2:	18 95       	reti

000006f4 <prvCopyDataToQueue>:
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	ec 01       	movw	r28, r24
     6fc:	14 2f       	mov	r17, r20
     6fe:	4c 8d       	ldd	r20, Y+28	; 0x1c
     700:	44 23       	and	r20, r20
     702:	d9 f1       	breq	.+118    	; 0x77a <prvCopyDataToQueue+0x86>
     704:	11 11       	cpse	r17, r1
     706:	16 c0       	rjmp	.+44     	; 0x734 <prvCopyDataToQueue+0x40>
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	8c 81       	ldd	r24, Y+4	; 0x04
     70c:	9d 81       	ldd	r25, Y+5	; 0x05
     70e:	0e 94 a5 11 	call	0x234a	; 0x234a <memcpy>
     712:	2c 8d       	ldd	r18, Y+28	; 0x1c
     714:	8c 81       	ldd	r24, Y+4	; 0x04
     716:	9d 81       	ldd	r25, Y+5	; 0x05
     718:	82 0f       	add	r24, r18
     71a:	91 1d       	adc	r25, r1
     71c:	9d 83       	std	Y+5, r25	; 0x05
     71e:	8c 83       	std	Y+4, r24	; 0x04
     720:	2a 81       	ldd	r18, Y+2	; 0x02
     722:	3b 81       	ldd	r19, Y+3	; 0x03
     724:	82 17       	cp	r24, r18
     726:	93 07       	cpc	r25, r19
     728:	40 f1       	brcs	.+80     	; 0x77a <prvCopyDataToQueue+0x86>
     72a:	88 81       	ld	r24, Y
     72c:	99 81       	ldd	r25, Y+1	; 0x01
     72e:	9d 83       	std	Y+5, r25	; 0x05
     730:	8c 83       	std	Y+4, r24	; 0x04
     732:	23 c0       	rjmp	.+70     	; 0x77a <prvCopyDataToQueue+0x86>
     734:	50 e0       	ldi	r21, 0x00	; 0
     736:	8e 81       	ldd	r24, Y+6	; 0x06
     738:	9f 81       	ldd	r25, Y+7	; 0x07
     73a:	0e 94 a5 11 	call	0x234a	; 0x234a <memcpy>
     73e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	91 95       	neg	r25
     744:	81 95       	neg	r24
     746:	91 09       	sbc	r25, r1
     748:	2e 81       	ldd	r18, Y+6	; 0x06
     74a:	3f 81       	ldd	r19, Y+7	; 0x07
     74c:	28 0f       	add	r18, r24
     74e:	39 1f       	adc	r19, r25
     750:	3f 83       	std	Y+7, r19	; 0x07
     752:	2e 83       	std	Y+6, r18	; 0x06
     754:	48 81       	ld	r20, Y
     756:	59 81       	ldd	r21, Y+1	; 0x01
     758:	24 17       	cp	r18, r20
     75a:	35 07       	cpc	r19, r21
     75c:	30 f4       	brcc	.+12     	; 0x76a <prvCopyDataToQueue+0x76>
     75e:	2a 81       	ldd	r18, Y+2	; 0x02
     760:	3b 81       	ldd	r19, Y+3	; 0x03
     762:	82 0f       	add	r24, r18
     764:	93 1f       	adc	r25, r19
     766:	9f 83       	std	Y+7, r25	; 0x07
     768:	8e 83       	std	Y+6, r24	; 0x06
     76a:	12 30       	cpi	r17, 0x02	; 2
     76c:	31 f4       	brne	.+12     	; 0x77a <prvCopyDataToQueue+0x86>
     76e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     770:	88 23       	and	r24, r24
     772:	19 f0       	breq	.+6      	; 0x77a <prvCopyDataToQueue+0x86>
     774:	8a 8d       	ldd	r24, Y+26	; 0x1a
     776:	81 50       	subi	r24, 0x01	; 1
     778:	8a 8f       	std	Y+26, r24	; 0x1a
     77a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     77c:	8f 5f       	subi	r24, 0xFF	; 255
     77e:	8a 8f       	std	Y+26, r24	; 0x1a
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	df 91       	pop	r29
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	08 95       	ret

0000078a <prvCopyDataFromQueue>:
     78a:	fc 01       	movw	r30, r24
     78c:	44 8d       	ldd	r20, Z+28	; 0x1c
     78e:	44 23       	and	r20, r20
     790:	a9 f0       	breq	.+42     	; 0x7bc <prvCopyDataFromQueue+0x32>
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	26 81       	ldd	r18, Z+6	; 0x06
     796:	37 81       	ldd	r19, Z+7	; 0x07
     798:	24 0f       	add	r18, r20
     79a:	35 1f       	adc	r19, r21
     79c:	37 83       	std	Z+7, r19	; 0x07
     79e:	26 83       	std	Z+6, r18	; 0x06
     7a0:	82 81       	ldd	r24, Z+2	; 0x02
     7a2:	93 81       	ldd	r25, Z+3	; 0x03
     7a4:	28 17       	cp	r18, r24
     7a6:	39 07       	cpc	r19, r25
     7a8:	20 f0       	brcs	.+8      	; 0x7b2 <prvCopyDataFromQueue+0x28>
     7aa:	80 81       	ld	r24, Z
     7ac:	91 81       	ldd	r25, Z+1	; 0x01
     7ae:	97 83       	std	Z+7, r25	; 0x07
     7b0:	86 83       	std	Z+6, r24	; 0x06
     7b2:	cb 01       	movw	r24, r22
     7b4:	66 81       	ldd	r22, Z+6	; 0x06
     7b6:	77 81       	ldd	r23, Z+7	; 0x07
     7b8:	0e 94 a5 11 	call	0x234a	; 0x234a <memcpy>
     7bc:	08 95       	ret

000007be <prvUnlockQueue>:
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	cf 93       	push	r28
     7c4:	df 93       	push	r29
     7c6:	ec 01       	movw	r28, r24
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	0f 92       	push	r0
     7ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7d0:	18 16       	cp	r1, r24
     7d2:	bc f4       	brge	.+46     	; 0x802 <prvUnlockQueue+0x44>
     7d4:	89 89       	ldd	r24, Y+17	; 0x11
     7d6:	81 11       	cpse	r24, r1
     7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <prvUnlockQueue+0x26>
     7da:	13 c0       	rjmp	.+38     	; 0x802 <prvUnlockQueue+0x44>
     7dc:	89 89       	ldd	r24, Y+17	; 0x11
     7de:	81 11       	cpse	r24, r1
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <prvUnlockQueue+0x2c>
     7e2:	0f c0       	rjmp	.+30     	; 0x802 <prvUnlockQueue+0x44>
     7e4:	8e 01       	movw	r16, r28
     7e6:	0f 5e       	subi	r16, 0xEF	; 239
     7e8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ea:	c8 01       	movw	r24, r16
     7ec:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskRemoveFromEventList>
     7f0:	81 11       	cpse	r24, r1
     7f2:	0e 94 85 0a 	call	0x150a	; 0x150a <vTaskMissedYield>
     7f6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7f8:	81 50       	subi	r24, 0x01	; 1
     7fa:	8e 8f       	std	Y+30, r24	; 0x1e
     7fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     7fe:	18 16       	cp	r1, r24
     800:	6c f3       	brlt	.-38     	; 0x7dc <prvUnlockQueue+0x1e>
     802:	8f ef       	ldi	r24, 0xFF	; 255
     804:	8e 8f       	std	Y+30, r24	; 0x1e
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f b6       	in	r0, 0x3f	; 63
     80c:	f8 94       	cli
     80e:	0f 92       	push	r0
     810:	8d 8d       	ldd	r24, Y+29	; 0x1d
     812:	18 16       	cp	r1, r24
     814:	bc f4       	brge	.+46     	; 0x844 <prvUnlockQueue+0x86>
     816:	88 85       	ldd	r24, Y+8	; 0x08
     818:	81 11       	cpse	r24, r1
     81a:	05 c0       	rjmp	.+10     	; 0x826 <prvUnlockQueue+0x68>
     81c:	13 c0       	rjmp	.+38     	; 0x844 <prvUnlockQueue+0x86>
     81e:	88 85       	ldd	r24, Y+8	; 0x08
     820:	81 11       	cpse	r24, r1
     822:	04 c0       	rjmp	.+8      	; 0x82c <prvUnlockQueue+0x6e>
     824:	0f c0       	rjmp	.+30     	; 0x844 <prvUnlockQueue+0x86>
     826:	8e 01       	movw	r16, r28
     828:	08 5f       	subi	r16, 0xF8	; 248
     82a:	1f 4f       	sbci	r17, 0xFF	; 255
     82c:	c8 01       	movw	r24, r16
     82e:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskRemoveFromEventList>
     832:	81 11       	cpse	r24, r1
     834:	0e 94 85 0a 	call	0x150a	; 0x150a <vTaskMissedYield>
     838:	8d 8d       	ldd	r24, Y+29	; 0x1d
     83a:	81 50       	subi	r24, 0x01	; 1
     83c:	8d 8f       	std	Y+29, r24	; 0x1d
     83e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     840:	18 16       	cp	r1, r24
     842:	6c f3       	brlt	.-38     	; 0x81e <prvUnlockQueue+0x60>
     844:	8f ef       	ldi	r24, 0xFF	; 255
     846:	8d 8f       	std	Y+29, r24	; 0x1d
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	1f 91       	pop	r17
     852:	0f 91       	pop	r16
     854:	08 95       	ret

00000856 <xQueueGenericReset>:
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	ec 01       	movw	r28, r24
     85c:	0f b6       	in	r0, 0x3f	; 63
     85e:	f8 94       	cli
     860:	0f 92       	push	r0
     862:	48 81       	ld	r20, Y
     864:	59 81       	ldd	r21, Y+1	; 0x01
     866:	2c 8d       	ldd	r18, Y+28	; 0x1c
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	7b 8d       	ldd	r23, Y+27	; 0x1b
     86c:	72 9f       	mul	r23, r18
     86e:	c0 01       	movw	r24, r0
     870:	73 9f       	mul	r23, r19
     872:	90 0d       	add	r25, r0
     874:	11 24       	eor	r1, r1
     876:	fa 01       	movw	r30, r20
     878:	e8 0f       	add	r30, r24
     87a:	f9 1f       	adc	r31, r25
     87c:	fb 83       	std	Y+3, r31	; 0x03
     87e:	ea 83       	std	Y+2, r30	; 0x02
     880:	1a 8e       	std	Y+26, r1	; 0x1a
     882:	5d 83       	std	Y+5, r21	; 0x05
     884:	4c 83       	std	Y+4, r20	; 0x04
     886:	82 1b       	sub	r24, r18
     888:	93 0b       	sbc	r25, r19
     88a:	84 0f       	add	r24, r20
     88c:	95 1f       	adc	r25, r21
     88e:	9f 83       	std	Y+7, r25	; 0x07
     890:	8e 83       	std	Y+6, r24	; 0x06
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	8d 8f       	std	Y+29, r24	; 0x1d
     896:	8e 8f       	std	Y+30, r24	; 0x1e
     898:	61 11       	cpse	r22, r1
     89a:	0c c0       	rjmp	.+24     	; 0x8b4 <__stack+0x55>
     89c:	88 85       	ldd	r24, Y+8	; 0x08
     89e:	88 23       	and	r24, r24
     8a0:	89 f0       	breq	.+34     	; 0x8c4 <__stack+0x65>
     8a2:	ce 01       	movw	r24, r28
     8a4:	08 96       	adiw	r24, 0x08	; 8
     8a6:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskRemoveFromEventList>
     8aa:	81 30       	cpi	r24, 0x01	; 1
     8ac:	59 f4       	brne	.+22     	; 0x8c4 <__stack+0x65>
     8ae:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     8b2:	08 c0       	rjmp	.+16     	; 0x8c4 <__stack+0x65>
     8b4:	ce 01       	movw	r24, r28
     8b6:	08 96       	adiw	r24, 0x08	; 8
     8b8:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     8bc:	ce 01       	movw	r24, r28
     8be:	41 96       	adiw	r24, 0x11	; 17
     8c0:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     8c4:	0f 90       	pop	r0
     8c6:	0f be       	out	0x3f, r0	; 63
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	df 91       	pop	r29
     8cc:	cf 91       	pop	r28
     8ce:	08 95       	ret

000008d0 <xQueueGenericCreate>:
     8d0:	0f 93       	push	r16
     8d2:	1f 93       	push	r17
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	88 23       	and	r24, r24
     8da:	01 f1       	breq	.+64     	; 0x91c <xQueueGenericCreate+0x4c>
     8dc:	06 2f       	mov	r16, r22
     8de:	18 2f       	mov	r17, r24
     8e0:	8f e1       	ldi	r24, 0x1F	; 31
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pvPortMalloc>
     8e8:	ec 01       	movw	r28, r24
     8ea:	89 2b       	or	r24, r25
     8ec:	c9 f0       	breq	.+50     	; 0x920 <xQueueGenericCreate+0x50>
     8ee:	10 9f       	mul	r17, r16
     8f0:	c0 01       	movw	r24, r0
     8f2:	11 24       	eor	r1, r1
     8f4:	01 96       	adiw	r24, 0x01	; 1
     8f6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pvPortMalloc>
     8fa:	99 83       	std	Y+1, r25	; 0x01
     8fc:	88 83       	st	Y, r24
     8fe:	89 2b       	or	r24, r25
     900:	39 f0       	breq	.+14     	; 0x910 <xQueueGenericCreate+0x40>
     902:	1b 8f       	std	Y+27, r17	; 0x1b
     904:	0c 8f       	std	Y+28, r16	; 0x1c
     906:	61 e0       	ldi	r22, 0x01	; 1
     908:	ce 01       	movw	r24, r28
     90a:	0e 94 2b 04 	call	0x856	; 0x856 <xQueueGenericReset>
     90e:	08 c0       	rjmp	.+16     	; 0x920 <xQueueGenericCreate+0x50>
     910:	ce 01       	movw	r24, r28
     912:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
     916:	c0 e0       	ldi	r28, 0x00	; 0
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	02 c0       	rjmp	.+4      	; 0x920 <xQueueGenericCreate+0x50>
     91c:	c0 e0       	ldi	r28, 0x00	; 0
     91e:	d0 e0       	ldi	r29, 0x00	; 0
     920:	ce 01       	movw	r24, r28
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	1f 91       	pop	r17
     928:	0f 91       	pop	r16
     92a:	08 95       	ret

0000092c <xQueueGenericSend>:
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	cf 93       	push	r28
     940:	df 93       	push	r29
     942:	00 d0       	rcall	.+0      	; 0x944 <xQueueGenericSend+0x18>
     944:	00 d0       	rcall	.+0      	; 0x946 <xQueueGenericSend+0x1a>
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
     94c:	8c 01       	movw	r16, r24
     94e:	6b 01       	movw	r12, r22
     950:	5d 83       	std	Y+5, r21	; 0x05
     952:	4c 83       	std	Y+4, r20	; 0x04
     954:	a2 2e       	mov	r10, r18
     956:	b1 2c       	mov	r11, r1
     958:	99 24       	eor	r9, r9
     95a:	93 94       	inc	r9
     95c:	7c 01       	movw	r14, r24
     95e:	88 e0       	ldi	r24, 0x08	; 8
     960:	e8 0e       	add	r14, r24
     962:	f1 1c       	adc	r15, r1
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	f8 94       	cli
     968:	0f 92       	push	r0
     96a:	f8 01       	movw	r30, r16
     96c:	92 8d       	ldd	r25, Z+26	; 0x1a
     96e:	83 8d       	ldd	r24, Z+27	; 0x1b
     970:	98 17       	cp	r25, r24
     972:	18 f0       	brcs	.+6      	; 0x97a <xQueueGenericSend+0x4e>
     974:	f2 e0       	ldi	r31, 0x02	; 2
     976:	af 12       	cpse	r10, r31
     978:	19 c0       	rjmp	.+50     	; 0x9ac <xQueueGenericSend+0x80>
     97a:	4a 2d       	mov	r20, r10
     97c:	b6 01       	movw	r22, r12
     97e:	c8 01       	movw	r24, r16
     980:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <prvCopyDataToQueue>
     984:	f8 01       	movw	r30, r16
     986:	91 89       	ldd	r25, Z+17	; 0x11
     988:	99 23       	and	r25, r25
     98a:	49 f0       	breq	.+18     	; 0x99e <xQueueGenericSend+0x72>
     98c:	c8 01       	movw	r24, r16
     98e:	41 96       	adiw	r24, 0x11	; 17
     990:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskRemoveFromEventList>
     994:	81 30       	cpi	r24, 0x01	; 1
     996:	31 f4       	brne	.+12     	; 0x9a4 <xQueueGenericSend+0x78>
     998:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     99c:	03 c0       	rjmp	.+6      	; 0x9a4 <xQueueGenericSend+0x78>
     99e:	81 11       	cpse	r24, r1
     9a0:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	50 c0       	rjmp	.+160    	; 0xa4c <xQueueGenericSend+0x120>
     9ac:	8c 81       	ldd	r24, Y+4	; 0x04
     9ae:	9d 81       	ldd	r25, Y+5	; 0x05
     9b0:	89 2b       	or	r24, r25
     9b2:	21 f4       	brne	.+8      	; 0x9bc <xQueueGenericSend+0x90>
     9b4:	0f 90       	pop	r0
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	48 c0       	rjmp	.+144    	; 0xa4c <xQueueGenericSend+0x120>
     9bc:	b1 10       	cpse	r11, r1
     9be:	05 c0       	rjmp	.+10     	; 0x9ca <xQueueGenericSend+0x9e>
     9c0:	ce 01       	movw	r24, r28
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	0e 94 48 0a 	call	0x1490	; 0x1490 <vTaskSetTimeOutState>
     9c8:	b9 2c       	mov	r11, r9
     9ca:	0f 90       	pop	r0
     9cc:	0f be       	out	0x3f, r0	; 63
     9ce:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
     9d2:	0f b6       	in	r0, 0x3f	; 63
     9d4:	f8 94       	cli
     9d6:	0f 92       	push	r0
     9d8:	f8 01       	movw	r30, r16
     9da:	85 8d       	ldd	r24, Z+29	; 0x1d
     9dc:	8f 3f       	cpi	r24, 0xFF	; 255
     9de:	09 f4       	brne	.+2      	; 0x9e2 <xQueueGenericSend+0xb6>
     9e0:	15 8e       	std	Z+29, r1	; 0x1d
     9e2:	f8 01       	movw	r30, r16
     9e4:	86 8d       	ldd	r24, Z+30	; 0x1e
     9e6:	8f 3f       	cpi	r24, 0xFF	; 255
     9e8:	09 f4       	brne	.+2      	; 0x9ec <xQueueGenericSend+0xc0>
     9ea:	16 8e       	std	Z+30, r1	; 0x1e
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	be 01       	movw	r22, r28
     9f2:	6c 5f       	subi	r22, 0xFC	; 252
     9f4:	7f 4f       	sbci	r23, 0xFF	; 255
     9f6:	ce 01       	movw	r24, r28
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskCheckForTimeOut>
     9fe:	81 11       	cpse	r24, r1
     a00:	1f c0       	rjmp	.+62     	; 0xa40 <xQueueGenericSend+0x114>
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	0f 92       	push	r0
     a08:	f8 01       	movw	r30, r16
     a0a:	92 8d       	ldd	r25, Z+26	; 0x1a
     a0c:	0f 90       	pop	r0
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	83 8d       	ldd	r24, Z+27	; 0x1b
     a12:	98 13       	cpse	r25, r24
     a14:	0f c0       	rjmp	.+30     	; 0xa34 <xQueueGenericSend+0x108>
     a16:	6c 81       	ldd	r22, Y+4	; 0x04
     a18:	7d 81       	ldd	r23, Y+5	; 0x05
     a1a:	c7 01       	movw	r24, r14
     a1c:	0e 94 85 09 	call	0x130a	; 0x130a <vTaskPlaceOnEventList>
     a20:	c8 01       	movw	r24, r16
     a22:	0e 94 df 03 	call	0x7be	; 0x7be <prvUnlockQueue>
     a26:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     a2a:	81 11       	cpse	r24, r1
     a2c:	9b cf       	rjmp	.-202    	; 0x964 <xQueueGenericSend+0x38>
     a2e:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     a32:	98 cf       	rjmp	.-208    	; 0x964 <xQueueGenericSend+0x38>
     a34:	c8 01       	movw	r24, r16
     a36:	0e 94 df 03 	call	0x7be	; 0x7be <prvUnlockQueue>
     a3a:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     a3e:	92 cf       	rjmp	.-220    	; 0x964 <xQueueGenericSend+0x38>
     a40:	c8 01       	movw	r24, r16
     a42:	0e 94 df 03 	call	0x7be	; 0x7be <prvUnlockQueue>
     a46:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     a4a:	80 e0       	ldi	r24, 0x00	; 0
     a4c:	0f 90       	pop	r0
     a4e:	0f 90       	pop	r0
     a50:	0f 90       	pop	r0
     a52:	0f 90       	pop	r0
     a54:	0f 90       	pop	r0
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	df 90       	pop	r13
     a64:	cf 90       	pop	r12
     a66:	bf 90       	pop	r11
     a68:	af 90       	pop	r10
     a6a:	9f 90       	pop	r9
     a6c:	08 95       	ret

00000a6e <xQueueGenericReceive>:
     a6e:	9f 92       	push	r9
     a70:	af 92       	push	r10
     a72:	bf 92       	push	r11
     a74:	cf 92       	push	r12
     a76:	df 92       	push	r13
     a78:	ef 92       	push	r14
     a7a:	ff 92       	push	r15
     a7c:	0f 93       	push	r16
     a7e:	1f 93       	push	r17
     a80:	cf 93       	push	r28
     a82:	df 93       	push	r29
     a84:	00 d0       	rcall	.+0      	; 0xa86 <xQueueGenericReceive+0x18>
     a86:	00 d0       	rcall	.+0      	; 0xa88 <xQueueGenericReceive+0x1a>
     a88:	1f 92       	push	r1
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	8c 01       	movw	r16, r24
     a90:	6b 01       	movw	r12, r22
     a92:	5d 83       	std	Y+5, r21	; 0x05
     a94:	4c 83       	std	Y+4, r20	; 0x04
     a96:	92 2e       	mov	r9, r18
     a98:	b1 2c       	mov	r11, r1
     a9a:	aa 24       	eor	r10, r10
     a9c:	a3 94       	inc	r10
     a9e:	7c 01       	movw	r14, r24
     aa0:	81 e1       	ldi	r24, 0x11	; 17
     aa2:	e8 0e       	add	r14, r24
     aa4:	f1 1c       	adc	r15, r1
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	0f 92       	push	r0
     aac:	f8 01       	movw	r30, r16
     aae:	82 8d       	ldd	r24, Z+26	; 0x1a
     ab0:	88 23       	and	r24, r24
     ab2:	49 f1       	breq	.+82     	; 0xb06 <xQueueGenericReceive+0x98>
     ab4:	e6 80       	ldd	r14, Z+6	; 0x06
     ab6:	f7 80       	ldd	r15, Z+7	; 0x07
     ab8:	b6 01       	movw	r22, r12
     aba:	c8 01       	movw	r24, r16
     abc:	0e 94 c5 03 	call	0x78a	; 0x78a <prvCopyDataFromQueue>
     ac0:	91 10       	cpse	r9, r1
     ac2:	10 c0       	rjmp	.+32     	; 0xae4 <xQueueGenericReceive+0x76>
     ac4:	f8 01       	movw	r30, r16
     ac6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ac8:	81 50       	subi	r24, 0x01	; 1
     aca:	82 8f       	std	Z+26, r24	; 0x1a
     acc:	80 85       	ldd	r24, Z+8	; 0x08
     ace:	88 23       	and	r24, r24
     ad0:	b1 f0       	breq	.+44     	; 0xafe <xQueueGenericReceive+0x90>
     ad2:	c8 01       	movw	r24, r16
     ad4:	08 96       	adiw	r24, 0x08	; 8
     ad6:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskRemoveFromEventList>
     ada:	81 30       	cpi	r24, 0x01	; 1
     adc:	81 f4       	brne	.+32     	; 0xafe <xQueueGenericReceive+0x90>
     ade:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     ae2:	0d c0       	rjmp	.+26     	; 0xafe <xQueueGenericReceive+0x90>
     ae4:	f8 01       	movw	r30, r16
     ae6:	f7 82       	std	Z+7, r15	; 0x07
     ae8:	e6 82       	std	Z+6, r14	; 0x06
     aea:	81 89       	ldd	r24, Z+17	; 0x11
     aec:	88 23       	and	r24, r24
     aee:	39 f0       	breq	.+14     	; 0xafe <xQueueGenericReceive+0x90>
     af0:	c8 01       	movw	r24, r16
     af2:	41 96       	adiw	r24, 0x11	; 17
     af4:	0e 94 c6 09 	call	0x138c	; 0x138c <xTaskRemoveFromEventList>
     af8:	81 11       	cpse	r24, r1
     afa:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     afe:	0f 90       	pop	r0
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	81 e0       	ldi	r24, 0x01	; 1
     b04:	4f c0       	rjmp	.+158    	; 0xba4 <xQueueGenericReceive+0x136>
     b06:	8c 81       	ldd	r24, Y+4	; 0x04
     b08:	9d 81       	ldd	r25, Y+5	; 0x05
     b0a:	89 2b       	or	r24, r25
     b0c:	21 f4       	brne	.+8      	; 0xb16 <xQueueGenericReceive+0xa8>
     b0e:	0f 90       	pop	r0
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	47 c0       	rjmp	.+142    	; 0xba4 <xQueueGenericReceive+0x136>
     b16:	b1 10       	cpse	r11, r1
     b18:	05 c0       	rjmp	.+10     	; 0xb24 <xQueueGenericReceive+0xb6>
     b1a:	ce 01       	movw	r24, r28
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	0e 94 48 0a 	call	0x1490	; 0x1490 <vTaskSetTimeOutState>
     b22:	ba 2c       	mov	r11, r10
     b24:	0f 90       	pop	r0
     b26:	0f be       	out	0x3f, r0	; 63
     b28:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	f8 94       	cli
     b30:	0f 92       	push	r0
     b32:	f8 01       	movw	r30, r16
     b34:	85 8d       	ldd	r24, Z+29	; 0x1d
     b36:	8f 3f       	cpi	r24, 0xFF	; 255
     b38:	09 f4       	brne	.+2      	; 0xb3c <xQueueGenericReceive+0xce>
     b3a:	15 8e       	std	Z+29, r1	; 0x1d
     b3c:	f8 01       	movw	r30, r16
     b3e:	86 8d       	ldd	r24, Z+30	; 0x1e
     b40:	8f 3f       	cpi	r24, 0xFF	; 255
     b42:	09 f4       	brne	.+2      	; 0xb46 <xQueueGenericReceive+0xd8>
     b44:	16 8e       	std	Z+30, r1	; 0x1e
     b46:	0f 90       	pop	r0
     b48:	0f be       	out	0x3f, r0	; 63
     b4a:	be 01       	movw	r22, r28
     b4c:	6c 5f       	subi	r22, 0xFC	; 252
     b4e:	7f 4f       	sbci	r23, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <xTaskCheckForTimeOut>
     b58:	81 11       	cpse	r24, r1
     b5a:	1e c0       	rjmp	.+60     	; 0xb98 <xQueueGenericReceive+0x12a>
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	0f 92       	push	r0
     b62:	f8 01       	movw	r30, r16
     b64:	82 8d       	ldd	r24, Z+26	; 0x1a
     b66:	0f 90       	pop	r0
     b68:	0f be       	out	0x3f, r0	; 63
     b6a:	81 11       	cpse	r24, r1
     b6c:	0f c0       	rjmp	.+30     	; 0xb8c <xQueueGenericReceive+0x11e>
     b6e:	6c 81       	ldd	r22, Y+4	; 0x04
     b70:	7d 81       	ldd	r23, Y+5	; 0x05
     b72:	c7 01       	movw	r24, r14
     b74:	0e 94 85 09 	call	0x130a	; 0x130a <vTaskPlaceOnEventList>
     b78:	c8 01       	movw	r24, r16
     b7a:	0e 94 df 03 	call	0x7be	; 0x7be <prvUnlockQueue>
     b7e:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     b82:	81 11       	cpse	r24, r1
     b84:	90 cf       	rjmp	.-224    	; 0xaa6 <xQueueGenericReceive+0x38>
     b86:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     b8a:	8d cf       	rjmp	.-230    	; 0xaa6 <xQueueGenericReceive+0x38>
     b8c:	c8 01       	movw	r24, r16
     b8e:	0e 94 df 03 	call	0x7be	; 0x7be <prvUnlockQueue>
     b92:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     b96:	87 cf       	rjmp	.-242    	; 0xaa6 <xQueueGenericReceive+0x38>
     b98:	c8 01       	movw	r24, r16
     b9a:	0e 94 df 03 	call	0x7be	; 0x7be <prvUnlockQueue>
     b9e:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	1f 91       	pop	r17
     bb4:	0f 91       	pop	r16
     bb6:	ff 90       	pop	r15
     bb8:	ef 90       	pop	r14
     bba:	df 90       	pop	r13
     bbc:	cf 90       	pop	r12
     bbe:	bf 90       	pop	r11
     bc0:	af 90       	pop	r10
     bc2:	9f 90       	pop	r9
     bc4:	08 95       	ret

00000bc6 <prvResetNextTaskUnblockTime>:
     bc6:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <pxDelayedTaskList>
     bca:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <pxDelayedTaskList+0x1>
     bce:	80 81       	ld	r24, Z
     bd0:	81 11       	cpse	r24, r1
     bd2:	07 c0       	rjmp	.+14     	; 0xbe2 <prvResetNextTaskUnblockTime+0x1c>
     bd4:	8f ef       	ldi	r24, 0xFF	; 255
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     bdc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     be0:	08 95       	ret
     be2:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <pxDelayedTaskList>
     be6:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <pxDelayedTaskList+0x1>
     bea:	05 80       	ldd	r0, Z+5	; 0x05
     bec:	f6 81       	ldd	r31, Z+6	; 0x06
     bee:	e0 2d       	mov	r30, r0
     bf0:	06 80       	ldd	r0, Z+6	; 0x06
     bf2:	f7 81       	ldd	r31, Z+7	; 0x07
     bf4:	e0 2d       	mov	r30, r0
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     bfe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     c02:	08 95       	ret

00000c04 <prvAddCurrentTaskToDelayedList>:
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	ec 01       	movw	r28, r24
     c0a:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
     c0e:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     c12:	93 83       	std	Z+3, r25	; 0x03
     c14:	82 83       	std	Z+2, r24	; 0x02
     c16:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xTickCount>
     c1a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <xTickCount+0x1>
     c1e:	c8 17       	cp	r28, r24
     c20:	d9 07       	cpc	r29, r25
     c22:	68 f4       	brcc	.+26     	; 0xc3e <prvAddCurrentTaskToDelayedList+0x3a>
     c24:	60 91 41 06 	lds	r22, 0x0641	; 0x800641 <pxCurrentTCB>
     c28:	70 91 42 06 	lds	r23, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     c2c:	80 91 e3 05 	lds	r24, 0x05E3	; 0x8005e3 <pxOverflowDelayedTaskList>
     c30:	90 91 e4 05 	lds	r25, 0x05E4	; 0x8005e4 <pxOverflowDelayedTaskList+0x1>
     c34:	6e 5f       	subi	r22, 0xFE	; 254
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
     c38:	0e 94 ca 01 	call	0x394	; 0x394 <vListInsert>
     c3c:	17 c0       	rjmp	.+46     	; 0xc6c <prvAddCurrentTaskToDelayedList+0x68>
     c3e:	60 91 41 06 	lds	r22, 0x0641	; 0x800641 <pxCurrentTCB>
     c42:	70 91 42 06 	lds	r23, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     c46:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <pxDelayedTaskList>
     c4a:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <pxDelayedTaskList+0x1>
     c4e:	6e 5f       	subi	r22, 0xFE	; 254
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	0e 94 ca 01 	call	0x394	; 0x394 <vListInsert>
     c56:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     c5a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     c5e:	c8 17       	cp	r28, r24
     c60:	d9 07       	cpc	r29, r25
     c62:	20 f4       	brcc	.+8      	; 0xc6c <prvAddCurrentTaskToDelayedList+0x68>
     c64:	d0 93 61 00 	sts	0x0061, r29	; 0x800061 <__data_start+0x1>
     c68:	c0 93 60 00 	sts	0x0060, r28	; 0x800060 <__data_start>
     c6c:	df 91       	pop	r29
     c6e:	cf 91       	pop	r28
     c70:	08 95       	ret

00000c72 <xTaskGenericCreate>:
     c72:	4f 92       	push	r4
     c74:	5f 92       	push	r5
     c76:	6f 92       	push	r6
     c78:	7f 92       	push	r7
     c7a:	8f 92       	push	r8
     c7c:	9f 92       	push	r9
     c7e:	af 92       	push	r10
     c80:	bf 92       	push	r11
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	0f 93       	push	r16
     c8c:	1f 93       	push	r17
     c8e:	cf 93       	push	r28
     c90:	df 93       	push	r29
     c92:	4c 01       	movw	r8, r24
     c94:	eb 01       	movw	r28, r22
     c96:	5a 01       	movw	r10, r20
     c98:	29 01       	movw	r4, r18
     c9a:	8d e2       	ldi	r24, 0x2D	; 45
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pvPortMalloc>
     ca2:	3c 01       	movw	r6, r24
     ca4:	00 97       	sbiw	r24, 0x00	; 0
     ca6:	09 f4       	brne	.+2      	; 0xcaa <xTaskGenericCreate+0x38>
     ca8:	e4 c0       	rjmp	.+456    	; 0xe72 <xTaskGenericCreate+0x200>
     caa:	c1 14       	cp	r12, r1
     cac:	d1 04       	cpc	r13, r1
     cae:	09 f0       	breq	.+2      	; 0xcb2 <xTaskGenericCreate+0x40>
     cb0:	dc c0       	rjmp	.+440    	; 0xe6a <xTaskGenericCreate+0x1f8>
     cb2:	c5 01       	movw	r24, r10
     cb4:	0e 94 61 01 	call	0x2c2	; 0x2c2 <pvPortMalloc>
     cb8:	f3 01       	movw	r30, r6
     cba:	90 8f       	std	Z+24, r25	; 0x18
     cbc:	87 8b       	std	Z+23, r24	; 0x17
     cbe:	89 2b       	or	r24, r25
     cc0:	21 f4       	brne	.+8      	; 0xcca <xTaskGenericCreate+0x58>
     cc2:	c3 01       	movw	r24, r6
     cc4:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
     cc8:	d4 c0       	rjmp	.+424    	; 0xe72 <xTaskGenericCreate+0x200>
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	af 1a       	sub	r10, r31
     cce:	b1 08       	sbc	r11, r1
     cd0:	f3 01       	movw	r30, r6
     cd2:	87 89       	ldd	r24, Z+23	; 0x17
     cd4:	90 8d       	ldd	r25, Z+24	; 0x18
     cd6:	a8 0e       	add	r10, r24
     cd8:	b9 1e       	adc	r11, r25
     cda:	88 81       	ld	r24, Y
     cdc:	81 8f       	std	Z+25, r24	; 0x19
     cde:	88 81       	ld	r24, Y
     ce0:	88 23       	and	r24, r24
     ce2:	81 f0       	breq	.+32     	; 0xd04 <xTaskGenericCreate+0x92>
     ce4:	d3 01       	movw	r26, r6
     ce6:	5a 96       	adiw	r26, 0x1a	; 26
     ce8:	fe 01       	movw	r30, r28
     cea:	31 96       	adiw	r30, 0x01	; 1
     cec:	9e 01       	movw	r18, r28
     cee:	2c 5e       	subi	r18, 0xEC	; 236
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
     cf2:	ef 01       	movw	r28, r30
     cf4:	81 91       	ld	r24, Z+
     cf6:	8d 93       	st	X+, r24
     cf8:	88 81       	ld	r24, Y
     cfa:	88 23       	and	r24, r24
     cfc:	19 f0       	breq	.+6      	; 0xd04 <xTaskGenericCreate+0x92>
     cfe:	2e 17       	cp	r18, r30
     d00:	3f 07       	cpc	r19, r31
     d02:	b9 f7       	brne	.-18     	; 0xcf2 <xTaskGenericCreate+0x80>
     d04:	f3 01       	movw	r30, r6
     d06:	14 a6       	std	Z+44, r1	; 0x2c
     d08:	10 2f       	mov	r17, r16
     d0a:	08 30       	cpi	r16, 0x08	; 8
     d0c:	08 f0       	brcs	.+2      	; 0xd10 <xTaskGenericCreate+0x9e>
     d0e:	17 e0       	ldi	r17, 0x07	; 7
     d10:	f3 01       	movw	r30, r6
     d12:	16 8b       	std	Z+22, r17	; 0x16
     d14:	e3 01       	movw	r28, r6
     d16:	22 96       	adiw	r28, 0x02	; 2
     d18:	ce 01       	movw	r24, r28
     d1a:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialiseItem>
     d1e:	c3 01       	movw	r24, r6
     d20:	0c 96       	adiw	r24, 0x0c	; 12
     d22:	0e 94 a5 01 	call	0x34a	; 0x34a <vListInitialiseItem>
     d26:	f3 01       	movw	r30, r6
     d28:	71 86       	std	Z+9, r7	; 0x09
     d2a:	60 86       	std	Z+8, r6	; 0x08
     d2c:	88 e0       	ldi	r24, 0x08	; 8
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	81 1b       	sub	r24, r17
     d32:	91 09       	sbc	r25, r1
     d34:	95 87       	std	Z+13, r25	; 0x0d
     d36:	84 87       	std	Z+12, r24	; 0x0c
     d38:	73 8a       	std	Z+19, r7	; 0x13
     d3a:	62 8a       	std	Z+18, r6	; 0x12
     d3c:	a2 01       	movw	r20, r4
     d3e:	b4 01       	movw	r22, r8
     d40:	c5 01       	movw	r24, r10
     d42:	0e 94 21 02 	call	0x442	; 0x442 <pxPortInitialiseStack>
     d46:	f3 01       	movw	r30, r6
     d48:	91 83       	std	Z+1, r25	; 0x01
     d4a:	80 83       	st	Z, r24
     d4c:	e1 14       	cp	r14, r1
     d4e:	f1 04       	cpc	r15, r1
     d50:	19 f0       	breq	.+6      	; 0xd58 <xTaskGenericCreate+0xe6>
     d52:	f7 01       	movw	r30, r14
     d54:	71 82       	std	Z+1, r7	; 0x01
     d56:	60 82       	st	Z, r6
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	0f 92       	push	r0
     d5e:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <uxCurrentNumberOfTasks>
     d62:	8f 5f       	subi	r24, 0xFF	; 255
     d64:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <uxCurrentNumberOfTasks>
     d68:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <pxCurrentTCB>
     d6c:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     d70:	89 2b       	or	r24, r25
     d72:	d9 f5       	brne	.+118    	; 0xdea <xTaskGenericCreate+0x178>
     d74:	70 92 42 06 	sts	0x0642, r7	; 0x800642 <pxCurrentTCB+0x1>
     d78:	60 92 41 06 	sts	0x0641, r6	; 0x800641 <pxCurrentTCB>
     d7c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <uxCurrentNumberOfTasks>
     d80:	81 30       	cpi	r24, 0x01	; 1
     d82:	09 f0       	breq	.+2      	; 0xd86 <xTaskGenericCreate+0x114>
     d84:	41 c0       	rjmp	.+130    	; 0xe08 <xTaskGenericCreate+0x196>
     d86:	0f 2e       	mov	r0, r31
     d88:	f9 ef       	ldi	r31, 0xF9	; 249
     d8a:	ef 2e       	mov	r14, r31
     d8c:	f5 e0       	ldi	r31, 0x05	; 5
     d8e:	ff 2e       	mov	r15, r31
     d90:	f0 2d       	mov	r31, r0
     d92:	0f 2e       	mov	r0, r31
     d94:	f1 e4       	ldi	r31, 0x41	; 65
     d96:	cf 2e       	mov	r12, r31
     d98:	f6 e0       	ldi	r31, 0x06	; 6
     d9a:	df 2e       	mov	r13, r31
     d9c:	f0 2d       	mov	r31, r0
     d9e:	c7 01       	movw	r24, r14
     da0:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     da4:	f9 e0       	ldi	r31, 0x09	; 9
     da6:	ef 0e       	add	r14, r31
     da8:	f1 1c       	adc	r15, r1
     daa:	ce 14       	cp	r12, r14
     dac:	df 04       	cpc	r13, r15
     dae:	b9 f7       	brne	.-18     	; 0xd9e <xTaskGenericCreate+0x12c>
     db0:	80 ef       	ldi	r24, 0xF0	; 240
     db2:	95 e0       	ldi	r25, 0x05	; 5
     db4:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     db8:	87 ee       	ldi	r24, 0xE7	; 231
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     dc0:	8a ed       	ldi	r24, 0xDA	; 218
     dc2:	95 e0       	ldi	r25, 0x05	; 5
     dc4:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     dc8:	81 ed       	ldi	r24, 0xD1	; 209
     dca:	95 e0       	ldi	r25, 0x05	; 5
     dcc:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialise>
     dd0:	80 ef       	ldi	r24, 0xF0	; 240
     dd2:	95 e0       	ldi	r25, 0x05	; 5
     dd4:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <pxDelayedTaskList+0x1>
     dd8:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <pxDelayedTaskList>
     ddc:	87 ee       	ldi	r24, 0xE7	; 231
     dde:	95 e0       	ldi	r25, 0x05	; 5
     de0:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <pxOverflowDelayedTaskList+0x1>
     de4:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <pxOverflowDelayedTaskList>
     de8:	0f c0       	rjmp	.+30     	; 0xe08 <xTaskGenericCreate+0x196>
     dea:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <xSchedulerRunning>
     dee:	81 11       	cpse	r24, r1
     df0:	0b c0       	rjmp	.+22     	; 0xe08 <xTaskGenericCreate+0x196>
     df2:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
     df6:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     dfa:	86 89       	ldd	r24, Z+22	; 0x16
     dfc:	08 17       	cp	r16, r24
     dfe:	20 f0       	brcs	.+8      	; 0xe08 <xTaskGenericCreate+0x196>
     e00:	70 92 42 06 	sts	0x0642, r7	; 0x800642 <pxCurrentTCB+0x1>
     e04:	60 92 41 06 	sts	0x0641, r6	; 0x800641 <pxCurrentTCB>
     e08:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxTaskNumber>
     e0c:	8f 5f       	subi	r24, 0xFF	; 255
     e0e:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxTaskNumber>
     e12:	f3 01       	movw	r30, r6
     e14:	86 89       	ldd	r24, Z+22	; 0x16
     e16:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <uxTopReadyPriority>
     e1a:	98 17       	cp	r25, r24
     e1c:	10 f4       	brcc	.+4      	; 0xe22 <xTaskGenericCreate+0x1b0>
     e1e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9c 01       	movw	r18, r24
     e26:	22 0f       	add	r18, r18
     e28:	33 1f       	adc	r19, r19
     e2a:	22 0f       	add	r18, r18
     e2c:	33 1f       	adc	r19, r19
     e2e:	22 0f       	add	r18, r18
     e30:	33 1f       	adc	r19, r19
     e32:	82 0f       	add	r24, r18
     e34:	93 1f       	adc	r25, r19
     e36:	be 01       	movw	r22, r28
     e38:	87 50       	subi	r24, 0x07	; 7
     e3a:	9a 4f       	sbci	r25, 0xFA	; 250
     e3c:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <xSchedulerRunning>
     e48:	88 23       	and	r24, r24
     e4a:	59 f0       	breq	.+22     	; 0xe62 <xTaskGenericCreate+0x1f0>
     e4c:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
     e50:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
     e54:	86 89       	ldd	r24, Z+22	; 0x16
     e56:	80 17       	cp	r24, r16
     e58:	30 f4       	brcc	.+12     	; 0xe66 <xTaskGenericCreate+0x1f4>
     e5a:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	09 c0       	rjmp	.+18     	; 0xe74 <xTaskGenericCreate+0x202>
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	07 c0       	rjmp	.+14     	; 0xe74 <xTaskGenericCreate+0x202>
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <xTaskGenericCreate+0x202>
     e6a:	fc 01       	movw	r30, r24
     e6c:	d0 8e       	std	Z+24, r13	; 0x18
     e6e:	c7 8a       	std	Z+23, r12	; 0x17
     e70:	2c cf       	rjmp	.-424    	; 0xcca <xTaskGenericCreate+0x58>
     e72:	8f ef       	ldi	r24, 0xFF	; 255
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	1f 91       	pop	r17
     e7a:	0f 91       	pop	r16
     e7c:	ff 90       	pop	r15
     e7e:	ef 90       	pop	r14
     e80:	df 90       	pop	r13
     e82:	cf 90       	pop	r12
     e84:	bf 90       	pop	r11
     e86:	af 90       	pop	r10
     e88:	9f 90       	pop	r9
     e8a:	8f 90       	pop	r8
     e8c:	7f 90       	pop	r7
     e8e:	6f 90       	pop	r6
     e90:	5f 90       	pop	r5
     e92:	4f 90       	pop	r4
     e94:	08 95       	ret

00000e96 <vTaskStartScheduler>:
     e96:	af 92       	push	r10
     e98:	bf 92       	push	r11
     e9a:	cf 92       	push	r12
     e9c:	df 92       	push	r13
     e9e:	ef 92       	push	r14
     ea0:	ff 92       	push	r15
     ea2:	0f 93       	push	r16
     ea4:	a1 2c       	mov	r10, r1
     ea6:	b1 2c       	mov	r11, r1
     ea8:	c1 2c       	mov	r12, r1
     eaa:	d1 2c       	mov	r13, r1
     eac:	e1 2c       	mov	r14, r1
     eae:	f1 2c       	mov	r15, r1
     eb0:	00 e0       	ldi	r16, 0x00	; 0
     eb2:	20 e0       	ldi	r18, 0x00	; 0
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	45 e5       	ldi	r20, 0x55	; 85
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	62 e6       	ldi	r22, 0x62	; 98
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	8b ed       	ldi	r24, 0xDB	; 219
     ec0:	98 e0       	ldi	r25, 0x08	; 8
     ec2:	0e 94 39 06 	call	0xc72	; 0xc72 <xTaskGenericCreate>
     ec6:	81 30       	cpi	r24, 0x01	; 1
     ec8:	49 f4       	brne	.+18     	; 0xedc <vTaskStartScheduler+0x46>
     eca:	f8 94       	cli
     ecc:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <xSchedulerRunning>
     ed0:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <xTickCount+0x1>
     ed4:	10 92 cd 05 	sts	0x05CD, r1	; 0x8005cd <xTickCount>
     ed8:	0e 94 8d 02 	call	0x51a	; 0x51a <xPortStartScheduler>
     edc:	0f 91       	pop	r16
     ede:	ff 90       	pop	r15
     ee0:	ef 90       	pop	r14
     ee2:	df 90       	pop	r13
     ee4:	cf 90       	pop	r12
     ee6:	bf 90       	pop	r11
     ee8:	af 90       	pop	r10
     eea:	08 95       	ret

00000eec <vTaskSuspendAll>:
     eec:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxSchedulerSuspended>
     ef0:	8f 5f       	subi	r24, 0xFF	; 255
     ef2:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <uxSchedulerSuspended>
     ef6:	08 95       	ret

00000ef8 <xTaskIncrementTick>:
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxSchedulerSuspended>
     f0c:	81 11       	cpse	r24, r1
     f0e:	9b c0       	rjmp	.+310    	; 0x1046 <xTaskIncrementTick+0x14e>
     f10:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xTickCount>
     f14:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <xTickCount+0x1>
     f18:	01 96       	adiw	r24, 0x01	; 1
     f1a:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <xTickCount+0x1>
     f1e:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <xTickCount>
     f22:	e0 90 cd 05 	lds	r14, 0x05CD	; 0x8005cd <xTickCount>
     f26:	f0 90 ce 05 	lds	r15, 0x05CE	; 0x8005ce <xTickCount+0x1>
     f2a:	e1 14       	cp	r14, r1
     f2c:	f1 04       	cpc	r15, r1
     f2e:	b9 f4       	brne	.+46     	; 0xf5e <xTaskIncrementTick+0x66>
     f30:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <pxDelayedTaskList>
     f34:	90 91 e6 05 	lds	r25, 0x05E6	; 0x8005e6 <pxDelayedTaskList+0x1>
     f38:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <pxOverflowDelayedTaskList>
     f3c:	30 91 e4 05 	lds	r19, 0x05E4	; 0x8005e4 <pxOverflowDelayedTaskList+0x1>
     f40:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <pxDelayedTaskList+0x1>
     f44:	20 93 e5 05 	sts	0x05E5, r18	; 0x8005e5 <pxDelayedTaskList>
     f48:	90 93 e4 05 	sts	0x05E4, r25	; 0x8005e4 <pxOverflowDelayedTaskList+0x1>
     f4c:	80 93 e3 05 	sts	0x05E3, r24	; 0x8005e3 <pxOverflowDelayedTaskList>
     f50:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNumOfOverflows>
     f54:	8f 5f       	subi	r24, 0xFF	; 255
     f56:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNumOfOverflows>
     f5a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <prvResetNextTaskUnblockTime>
     f5e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     f62:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
     f66:	e8 16       	cp	r14, r24
     f68:	f9 06       	cpc	r15, r25
     f6a:	10 f4       	brcc	.+4      	; 0xf70 <xTaskIncrementTick+0x78>
     f6c:	d1 2c       	mov	r13, r1
     f6e:	53 c0       	rjmp	.+166    	; 0x1016 <xTaskIncrementTick+0x11e>
     f70:	d1 2c       	mov	r13, r1
     f72:	cc 24       	eor	r12, r12
     f74:	c3 94       	inc	r12
     f76:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <pxDelayedTaskList>
     f7a:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <pxDelayedTaskList+0x1>
     f7e:	80 81       	ld	r24, Z
     f80:	81 11       	cpse	r24, r1
     f82:	07 c0       	rjmp	.+14     	; 0xf92 <xTaskIncrementTick+0x9a>
     f84:	8f ef       	ldi	r24, 0xFF	; 255
     f86:	9f ef       	ldi	r25, 0xFF	; 255
     f88:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     f8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     f90:	42 c0       	rjmp	.+132    	; 0x1016 <xTaskIncrementTick+0x11e>
     f92:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <pxDelayedTaskList>
     f96:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <pxDelayedTaskList+0x1>
     f9a:	05 80       	ldd	r0, Z+5	; 0x05
     f9c:	f6 81       	ldd	r31, Z+6	; 0x06
     f9e:	e0 2d       	mov	r30, r0
     fa0:	c6 81       	ldd	r28, Z+6	; 0x06
     fa2:	d7 81       	ldd	r29, Z+7	; 0x07
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	9b 81       	ldd	r25, Y+3	; 0x03
     fa8:	e8 16       	cp	r14, r24
     faa:	f9 06       	cpc	r15, r25
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <xTaskIncrementTick+0xc0>
     fae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     fb2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <xTaskIncrementTick+0x11e>
     fb8:	8e 01       	movw	r16, r28
     fba:	0e 5f       	subi	r16, 0xFE	; 254
     fbc:	1f 4f       	sbci	r17, 0xFF	; 255
     fbe:	c8 01       	movw	r24, r16
     fc0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
     fc4:	8c 89       	ldd	r24, Y+20	; 0x14
     fc6:	9d 89       	ldd	r25, Y+21	; 0x15
     fc8:	89 2b       	or	r24, r25
     fca:	21 f0       	breq	.+8      	; 0xfd4 <xTaskIncrementTick+0xdc>
     fcc:	ce 01       	movw	r24, r28
     fce:	0c 96       	adiw	r24, 0x0c	; 12
     fd0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
     fd4:	8e 89       	ldd	r24, Y+22	; 0x16
     fd6:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <uxTopReadyPriority>
     fda:	98 17       	cp	r25, r24
     fdc:	10 f4       	brcc	.+4      	; 0xfe2 <xTaskIncrementTick+0xea>
     fde:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	9c 01       	movw	r18, r24
     fe6:	22 0f       	add	r18, r18
     fe8:	33 1f       	adc	r19, r19
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	82 0f       	add	r24, r18
     ff4:	93 1f       	adc	r25, r19
     ff6:	b8 01       	movw	r22, r16
     ff8:	87 50       	subi	r24, 0x07	; 7
     ffa:	9a 4f       	sbci	r25, 0xFA	; 250
     ffc:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
    1000:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    1004:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1008:	9e 89       	ldd	r25, Y+22	; 0x16
    100a:	86 89       	ldd	r24, Z+22	; 0x16
    100c:	98 17       	cp	r25, r24
    100e:	08 f4       	brcc	.+2      	; 0x1012 <xTaskIncrementTick+0x11a>
    1010:	b2 cf       	rjmp	.-156    	; 0xf76 <xTaskIncrementTick+0x7e>
    1012:	dc 2c       	mov	r13, r12
    1014:	b0 cf       	rjmp	.-160    	; 0xf76 <xTaskIncrementTick+0x7e>
    1016:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    101a:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    101e:	86 89       	ldd	r24, Z+22	; 0x16
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	fc 01       	movw	r30, r24
    1024:	ee 0f       	add	r30, r30
    1026:	ff 1f       	adc	r31, r31
    1028:	ee 0f       	add	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	ee 0f       	add	r30, r30
    102e:	ff 1f       	adc	r31, r31
    1030:	8e 0f       	add	r24, r30
    1032:	9f 1f       	adc	r25, r31
    1034:	fc 01       	movw	r30, r24
    1036:	e7 50       	subi	r30, 0x07	; 7
    1038:	fa 4f       	sbci	r31, 0xFA	; 250
    103a:	80 81       	ld	r24, Z
    103c:	82 30       	cpi	r24, 0x02	; 2
    103e:	48 f0       	brcs	.+18     	; 0x1052 <xTaskIncrementTick+0x15a>
    1040:	dd 24       	eor	r13, r13
    1042:	d3 94       	inc	r13
    1044:	06 c0       	rjmp	.+12     	; 0x1052 <xTaskIncrementTick+0x15a>
    1046:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <uxPendedTicks>
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <uxPendedTicks>
    1050:	d1 2c       	mov	r13, r1
    1052:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <xYieldPending>
    1056:	88 23       	and	r24, r24
    1058:	11 f0       	breq	.+4      	; 0x105e <xTaskIncrementTick+0x166>
    105a:	dd 24       	eor	r13, r13
    105c:	d3 94       	inc	r13
    105e:	8d 2d       	mov	r24, r13
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	ff 90       	pop	r15
    106a:	ef 90       	pop	r14
    106c:	df 90       	pop	r13
    106e:	cf 90       	pop	r12
    1070:	08 95       	ret

00001072 <xTaskResumeAll>:
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	0f 92       	push	r0
    1086:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxSchedulerSuspended>
    108a:	81 50       	subi	r24, 0x01	; 1
    108c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <uxSchedulerSuspended>
    1090:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxSchedulerSuspended>
    1094:	81 11       	cpse	r24, r1
    1096:	62 c0       	rjmp	.+196    	; 0x115c <xTaskResumeAll+0xea>
    1098:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <uxCurrentNumberOfTasks>
    109c:	81 11       	cpse	r24, r1
    109e:	33 c0       	rjmp	.+102    	; 0x1106 <xTaskResumeAll+0x94>
    10a0:	60 c0       	rjmp	.+192    	; 0x1162 <xTaskResumeAll+0xf0>
    10a2:	d7 01       	movw	r26, r14
    10a4:	15 96       	adiw	r26, 0x05	; 5
    10a6:	ed 91       	ld	r30, X+
    10a8:	fc 91       	ld	r31, X
    10aa:	16 97       	sbiw	r26, 0x06	; 6
    10ac:	c6 81       	ldd	r28, Z+6	; 0x06
    10ae:	d7 81       	ldd	r29, Z+7	; 0x07
    10b0:	ce 01       	movw	r24, r28
    10b2:	0c 96       	adiw	r24, 0x0c	; 12
    10b4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    10b8:	8e 01       	movw	r16, r28
    10ba:	0e 5f       	subi	r16, 0xFE	; 254
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	c8 01       	movw	r24, r16
    10c0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    10c4:	8e 89       	ldd	r24, Y+22	; 0x16
    10c6:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    10ca:	98 17       	cp	r25, r24
    10cc:	10 f4       	brcc	.+4      	; 0x10d2 <xTaskResumeAll+0x60>
    10ce:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9c 01       	movw	r18, r24
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	22 0f       	add	r18, r18
    10dc:	33 1f       	adc	r19, r19
    10de:	22 0f       	add	r18, r18
    10e0:	33 1f       	adc	r19, r19
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	b8 01       	movw	r22, r16
    10e8:	87 50       	subi	r24, 0x07	; 7
    10ea:	9a 4f       	sbci	r25, 0xFA	; 250
    10ec:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
    10f0:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    10f4:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    10f8:	9e 89       	ldd	r25, Y+22	; 0x16
    10fa:	86 89       	ldd	r24, Z+22	; 0x16
    10fc:	98 17       	cp	r25, r24
    10fe:	58 f0       	brcs	.+22     	; 0x1116 <xTaskResumeAll+0xa4>
    1100:	d0 92 c9 05 	sts	0x05C9, r13	; 0x8005c9 <xYieldPending>
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <xTaskResumeAll+0xa4>
    1106:	0f 2e       	mov	r0, r31
    1108:	fa ed       	ldi	r31, 0xDA	; 218
    110a:	ef 2e       	mov	r14, r31
    110c:	f5 e0       	ldi	r31, 0x05	; 5
    110e:	ff 2e       	mov	r15, r31
    1110:	f0 2d       	mov	r31, r0
    1112:	dd 24       	eor	r13, r13
    1114:	d3 94       	inc	r13
    1116:	f7 01       	movw	r30, r14
    1118:	80 81       	ld	r24, Z
    111a:	81 11       	cpse	r24, r1
    111c:	c2 cf       	rjmp	.-124    	; 0x10a2 <xTaskResumeAll+0x30>
    111e:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <uxPendedTicks>
    1122:	88 23       	and	r24, r24
    1124:	99 f0       	breq	.+38     	; 0x114c <xTaskResumeAll+0xda>
    1126:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <uxPendedTicks>
    112a:	88 23       	and	r24, r24
    112c:	79 f0       	breq	.+30     	; 0x114c <xTaskResumeAll+0xda>
    112e:	c1 e0       	ldi	r28, 0x01	; 1
    1130:	0e 94 7c 07 	call	0xef8	; 0xef8 <xTaskIncrementTick>
    1134:	81 11       	cpse	r24, r1
    1136:	c0 93 c9 05 	sts	0x05C9, r28	; 0x8005c9 <xYieldPending>
    113a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <uxPendedTicks>
    113e:	81 50       	subi	r24, 0x01	; 1
    1140:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <uxPendedTicks>
    1144:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <uxPendedTicks>
    1148:	81 11       	cpse	r24, r1
    114a:	f2 cf       	rjmp	.-28     	; 0x1130 <xTaskResumeAll+0xbe>
    114c:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <xYieldPending>
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	31 f4       	brne	.+12     	; 0x1160 <xTaskResumeAll+0xee>
    1154:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <xTaskResumeAll+0xf0>
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	01 c0       	rjmp	.+2      	; 0x1162 <xTaskResumeAll+0xf0>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	0f 90       	pop	r0
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	df 90       	pop	r13
    1174:	08 95       	ret

00001176 <vTaskDelay>:
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ec 01       	movw	r28, r24
    117c:	89 2b       	or	r24, r25
    117e:	b1 f0       	breq	.+44     	; 0x11ac <vTaskDelay+0x36>
    1180:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
    1184:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xTickCount>
    1188:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <xTickCount+0x1>
    118c:	c8 0f       	add	r28, r24
    118e:	d9 1f       	adc	r29, r25
    1190:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <pxCurrentTCB>
    1194:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1198:	02 96       	adiw	r24, 0x02	; 2
    119a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    119e:	ce 01       	movw	r24, r28
    11a0:	0e 94 02 06 	call	0xc04	; 0xc04 <prvAddCurrentTaskToDelayedList>
    11a4:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
    11a8:	81 11       	cpse	r24, r1
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vTaskDelay+0x3a>
    11ac:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <prvIdleTask>:
    11b6:	01 ed       	ldi	r16, 0xD1	; 209
    11b8:	15 e0       	ldi	r17, 0x05	; 5
    11ba:	0f 2e       	mov	r0, r31
    11bc:	f9 ef       	ldi	r31, 0xF9	; 249
    11be:	ef 2e       	mov	r14, r31
    11c0:	f5 e0       	ldi	r31, 0x05	; 5
    11c2:	ff 2e       	mov	r15, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	29 c0       	rjmp	.+82     	; 0x121a <prvIdleTask+0x64>
    11c8:	0e 94 76 07 	call	0xeec	; 0xeec <vTaskSuspendAll>
    11cc:	d8 01       	movw	r26, r16
    11ce:	cc 91       	ld	r28, X
    11d0:	0e 94 39 08 	call	0x1072	; 0x1072 <xTaskResumeAll>
    11d4:	cc 23       	and	r28, r28
    11d6:	09 f1       	breq	.+66     	; 0x121a <prvIdleTask+0x64>
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	0f 92       	push	r0
    11de:	d8 01       	movw	r26, r16
    11e0:	15 96       	adiw	r26, 0x05	; 5
    11e2:	ed 91       	ld	r30, X+
    11e4:	fc 91       	ld	r31, X
    11e6:	16 97       	sbiw	r26, 0x06	; 6
    11e8:	c6 81       	ldd	r28, Z+6	; 0x06
    11ea:	d7 81       	ldd	r29, Z+7	; 0x07
    11ec:	ce 01       	movw	r24, r28
    11ee:	02 96       	adiw	r24, 0x02	; 2
    11f0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    11f4:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <uxCurrentNumberOfTasks>
    11f8:	81 50       	subi	r24, 0x01	; 1
    11fa:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <uxCurrentNumberOfTasks>
    11fe:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <uxTasksDeleted>
    1202:	81 50       	subi	r24, 0x01	; 1
    1204:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <uxTasksDeleted>
    1208:	0f 90       	pop	r0
    120a:	0f be       	out	0x3f, r0	; 63
    120c:	8f 89       	ldd	r24, Y+23	; 0x17
    120e:	98 8d       	ldd	r25, Y+24	; 0x18
    1210:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
    1214:	ce 01       	movw	r24, r28
    1216:	0e 94 96 01 	call	0x32c	; 0x32c <vPortFree>
    121a:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <uxTasksDeleted>
    121e:	81 11       	cpse	r24, r1
    1220:	d3 cf       	rjmp	.-90     	; 0x11c8 <prvIdleTask+0x12>
    1222:	f7 01       	movw	r30, r14
    1224:	80 81       	ld	r24, Z
    1226:	82 30       	cpi	r24, 0x02	; 2
    1228:	c0 f3       	brcs	.-16     	; 0x121a <prvIdleTask+0x64>
    122a:	0e 94 c2 02 	call	0x584	; 0x584 <vPortYield>
    122e:	f5 cf       	rjmp	.-22     	; 0x121a <prvIdleTask+0x64>

00001230 <vTaskSwitchContext>:
    1230:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxSchedulerSuspended>
    1234:	88 23       	and	r24, r24
    1236:	21 f0       	breq	.+8      	; 0x1240 <vTaskSwitchContext+0x10>
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <xYieldPending>
    123e:	08 95       	ret
    1240:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <xYieldPending>
    1244:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	fc 01       	movw	r30, r24
    124c:	ee 0f       	add	r30, r30
    124e:	ff 1f       	adc	r31, r31
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	8e 0f       	add	r24, r30
    125a:	9f 1f       	adc	r25, r31
    125c:	fc 01       	movw	r30, r24
    125e:	e7 50       	subi	r30, 0x07	; 7
    1260:	fa 4f       	sbci	r31, 0xFA	; 250
    1262:	80 81       	ld	r24, Z
    1264:	81 11       	cpse	r24, r1
    1266:	17 c0       	rjmp	.+46     	; 0x1296 <vTaskSwitchContext+0x66>
    1268:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    126c:	81 50       	subi	r24, 0x01	; 1
    126e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    1272:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	fc 01       	movw	r30, r24
    127a:	ee 0f       	add	r30, r30
    127c:	ff 1f       	adc	r31, r31
    127e:	ee 0f       	add	r30, r30
    1280:	ff 1f       	adc	r31, r31
    1282:	ee 0f       	add	r30, r30
    1284:	ff 1f       	adc	r31, r31
    1286:	8e 0f       	add	r24, r30
    1288:	9f 1f       	adc	r25, r31
    128a:	fc 01       	movw	r30, r24
    128c:	e7 50       	subi	r30, 0x07	; 7
    128e:	fa 4f       	sbci	r31, 0xFA	; 250
    1290:	80 81       	ld	r24, Z
    1292:	88 23       	and	r24, r24
    1294:	49 f3       	breq	.-46     	; 0x1268 <vTaskSwitchContext+0x38>
    1296:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9c 01       	movw	r18, r24
    129e:	22 0f       	add	r18, r18
    12a0:	33 1f       	adc	r19, r19
    12a2:	22 0f       	add	r18, r18
    12a4:	33 1f       	adc	r19, r19
    12a6:	22 0f       	add	r18, r18
    12a8:	33 1f       	adc	r19, r19
    12aa:	28 0f       	add	r18, r24
    12ac:	39 1f       	adc	r19, r25
    12ae:	d9 01       	movw	r26, r18
    12b0:	a7 50       	subi	r26, 0x07	; 7
    12b2:	ba 4f       	sbci	r27, 0xFA	; 250
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	ed 91       	ld	r30, X+
    12b8:	fc 91       	ld	r31, X
    12ba:	12 97       	sbiw	r26, 0x02	; 2
    12bc:	02 80       	ldd	r0, Z+2	; 0x02
    12be:	f3 81       	ldd	r31, Z+3	; 0x03
    12c0:	e0 2d       	mov	r30, r0
    12c2:	12 96       	adiw	r26, 0x02	; 2
    12c4:	fc 93       	st	X, r31
    12c6:	ee 93       	st	-X, r30
    12c8:	11 97       	sbiw	r26, 0x01	; 1
    12ca:	24 50       	subi	r18, 0x04	; 4
    12cc:	3a 4f       	sbci	r19, 0xFA	; 250
    12ce:	e2 17       	cp	r30, r18
    12d0:	f3 07       	cpc	r31, r19
    12d2:	29 f4       	brne	.+10     	; 0x12de <vTaskSwitchContext+0xae>
    12d4:	22 81       	ldd	r18, Z+2	; 0x02
    12d6:	33 81       	ldd	r19, Z+3	; 0x03
    12d8:	fd 01       	movw	r30, r26
    12da:	32 83       	std	Z+2, r19	; 0x02
    12dc:	21 83       	std	Z+1, r18	; 0x01
    12de:	fc 01       	movw	r30, r24
    12e0:	ee 0f       	add	r30, r30
    12e2:	ff 1f       	adc	r31, r31
    12e4:	ee 0f       	add	r30, r30
    12e6:	ff 1f       	adc	r31, r31
    12e8:	ee 0f       	add	r30, r30
    12ea:	ff 1f       	adc	r31, r31
    12ec:	8e 0f       	add	r24, r30
    12ee:	9f 1f       	adc	r25, r31
    12f0:	fc 01       	movw	r30, r24
    12f2:	e7 50       	subi	r30, 0x07	; 7
    12f4:	fa 4f       	sbci	r31, 0xFA	; 250
    12f6:	01 80       	ldd	r0, Z+1	; 0x01
    12f8:	f2 81       	ldd	r31, Z+2	; 0x02
    12fa:	e0 2d       	mov	r30, r0
    12fc:	86 81       	ldd	r24, Z+6	; 0x06
    12fe:	97 81       	ldd	r25, Z+7	; 0x07
    1300:	90 93 42 06 	sts	0x0642, r25	; 0x800642 <pxCurrentTCB+0x1>
    1304:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <pxCurrentTCB>
    1308:	08 95       	ret

0000130a <vTaskPlaceOnEventList>:
    130a:	cf 93       	push	r28
    130c:	df 93       	push	r29
    130e:	eb 01       	movw	r28, r22
    1310:	60 91 41 06 	lds	r22, 0x0641	; 0x800641 <pxCurrentTCB>
    1314:	70 91 42 06 	lds	r23, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1318:	64 5f       	subi	r22, 0xF4	; 244
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	0e 94 ca 01 	call	0x394	; 0x394 <vListInsert>
    1320:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <pxCurrentTCB>
    1324:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1328:	02 96       	adiw	r24, 0x02	; 2
    132a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    132e:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xTickCount>
    1332:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <xTickCount+0x1>
    1336:	8c 0f       	add	r24, r28
    1338:	9d 1f       	adc	r25, r29
    133a:	0e 94 02 06 	call	0xc04	; 0xc04 <prvAddCurrentTaskToDelayedList>
    133e:	df 91       	pop	r29
    1340:	cf 91       	pop	r28
    1342:	08 95       	ret

00001344 <vTaskPlaceOnUnorderedEventList>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ea 01       	movw	r28, r20
    134a:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    134e:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1352:	70 68       	ori	r23, 0x80	; 128
    1354:	75 87       	std	Z+13, r23	; 0x0d
    1356:	64 87       	std	Z+12, r22	; 0x0c
    1358:	60 91 41 06 	lds	r22, 0x0641	; 0x800641 <pxCurrentTCB>
    135c:	70 91 42 06 	lds	r23, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1360:	64 5f       	subi	r22, 0xF4	; 244
    1362:	7f 4f       	sbci	r23, 0xFF	; 255
    1364:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
    1368:	80 91 41 06 	lds	r24, 0x0641	; 0x800641 <pxCurrentTCB>
    136c:	90 91 42 06 	lds	r25, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1370:	02 96       	adiw	r24, 0x02	; 2
    1372:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    1376:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xTickCount>
    137a:	90 91 ce 05 	lds	r25, 0x05CE	; 0x8005ce <xTickCount+0x1>
    137e:	8c 0f       	add	r24, r28
    1380:	9d 1f       	adc	r25, r29
    1382:	0e 94 02 06 	call	0xc04	; 0xc04 <prvAddCurrentTaskToDelayedList>
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <xTaskRemoveFromEventList>:
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	dc 01       	movw	r26, r24
    1396:	15 96       	adiw	r26, 0x05	; 5
    1398:	ed 91       	ld	r30, X+
    139a:	fc 91       	ld	r31, X
    139c:	16 97       	sbiw	r26, 0x06	; 6
    139e:	c6 81       	ldd	r28, Z+6	; 0x06
    13a0:	d7 81       	ldd	r29, Z+7	; 0x07
    13a2:	8e 01       	movw	r16, r28
    13a4:	04 5f       	subi	r16, 0xF4	; 244
    13a6:	1f 4f       	sbci	r17, 0xFF	; 255
    13a8:	c8 01       	movw	r24, r16
    13aa:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    13ae:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxSchedulerSuspended>
    13b2:	81 11       	cpse	r24, r1
    13b4:	1c c0       	rjmp	.+56     	; 0x13ee <xTaskRemoveFromEventList+0x62>
    13b6:	0a 50       	subi	r16, 0x0A	; 10
    13b8:	11 09       	sbc	r17, r1
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    13c0:	8e 89       	ldd	r24, Y+22	; 0x16
    13c2:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    13c6:	98 17       	cp	r25, r24
    13c8:	10 f4       	brcc	.+4      	; 0x13ce <xTaskRemoveFromEventList+0x42>
    13ca:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9c 01       	movw	r18, r24
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	82 0f       	add	r24, r18
    13e0:	93 1f       	adc	r25, r19
    13e2:	b8 01       	movw	r22, r16
    13e4:	87 50       	subi	r24, 0x07	; 7
    13e6:	9a 4f       	sbci	r25, 0xFA	; 250
    13e8:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
    13ec:	05 c0       	rjmp	.+10     	; 0x13f8 <xTaskRemoveFromEventList+0x6c>
    13ee:	b8 01       	movw	r22, r16
    13f0:	8a ed       	ldi	r24, 0xDA	; 218
    13f2:	95 e0       	ldi	r25, 0x05	; 5
    13f4:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
    13f8:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    13fc:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1400:	9e 89       	ldd	r25, Y+22	; 0x16
    1402:	86 89       	ldd	r24, Z+22	; 0x16
    1404:	89 17       	cp	r24, r25
    1406:	20 f4       	brcc	.+8      	; 0x1410 <xTaskRemoveFromEventList+0x84>
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <xYieldPending>
    140e:	01 c0       	rjmp	.+2      	; 0x1412 <xTaskRemoveFromEventList+0x86>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <xTaskRemoveFromUnorderedEventList>:
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	70 68       	ori	r23, 0x80	; 128
    1426:	fc 01       	movw	r30, r24
    1428:	71 83       	std	Z+1, r23	; 0x01
    142a:	60 83       	st	Z, r22
    142c:	c6 81       	ldd	r28, Z+6	; 0x06
    142e:	d7 81       	ldd	r29, Z+7	; 0x07
    1430:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    1434:	8e 01       	movw	r16, r28
    1436:	0e 5f       	subi	r16, 0xFE	; 254
    1438:	1f 4f       	sbci	r17, 0xFF	; 255
    143a:	c8 01       	movw	r24, r16
    143c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <uxListRemove>
    1440:	8e 89       	ldd	r24, Y+22	; 0x16
    1442:	90 91 cc 05 	lds	r25, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    1446:	98 17       	cp	r25, r24
    1448:	10 f4       	brcc	.+4      	; 0x144e <xTaskRemoveFromUnorderedEventList+0x32>
    144a:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 01       	movw	r18, r24
    1452:	22 0f       	add	r18, r18
    1454:	33 1f       	adc	r19, r19
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	22 0f       	add	r18, r18
    145c:	33 1f       	adc	r19, r19
    145e:	82 0f       	add	r24, r18
    1460:	93 1f       	adc	r25, r19
    1462:	b8 01       	movw	r22, r16
    1464:	87 50       	subi	r24, 0x07	; 7
    1466:	9a 4f       	sbci	r25, 0xFA	; 250
    1468:	0e 94 a9 01 	call	0x352	; 0x352 <vListInsertEnd>
    146c:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    1470:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1474:	9e 89       	ldd	r25, Y+22	; 0x16
    1476:	86 89       	ldd	r24, Z+22	; 0x16
    1478:	89 17       	cp	r24, r25
    147a:	20 f4       	brcc	.+8      	; 0x1484 <xTaskRemoveFromUnorderedEventList+0x68>
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <xYieldPending>
    1482:	01 c0       	rjmp	.+2      	; 0x1486 <xTaskRemoveFromUnorderedEventList+0x6a>
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	08 95       	ret

00001490 <vTaskSetTimeOutState>:
    1490:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <xNumOfOverflows>
    1494:	fc 01       	movw	r30, r24
    1496:	20 83       	st	Z, r18
    1498:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <xTickCount>
    149c:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <xTickCount+0x1>
    14a0:	32 83       	std	Z+2, r19	; 0x02
    14a2:	21 83       	std	Z+1, r18	; 0x01
    14a4:	08 95       	ret

000014a6 <xTaskCheckForTimeOut>:
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	fc 01       	movw	r30, r24
    14ac:	0f b6       	in	r0, 0x3f	; 63
    14ae:	f8 94       	cli
    14b0:	0f 92       	push	r0
    14b2:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <xTickCount>
    14b6:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <xTickCount+0x1>
    14ba:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNumOfOverflows>
    14be:	90 81       	ld	r25, Z
    14c0:	98 17       	cp	r25, r24
    14c2:	29 f0       	breq	.+10     	; 0x14ce <xTaskCheckForTimeOut+0x28>
    14c4:	81 81       	ldd	r24, Z+1	; 0x01
    14c6:	92 81       	ldd	r25, Z+2	; 0x02
    14c8:	28 17       	cp	r18, r24
    14ca:	39 07       	cpc	r19, r25
    14cc:	b0 f4       	brcc	.+44     	; 0x14fa <xTaskCheckForTimeOut+0x54>
    14ce:	a1 81       	ldd	r26, Z+1	; 0x01
    14d0:	b2 81       	ldd	r27, Z+2	; 0x02
    14d2:	eb 01       	movw	r28, r22
    14d4:	48 81       	ld	r20, Y
    14d6:	59 81       	ldd	r21, Y+1	; 0x01
    14d8:	c9 01       	movw	r24, r18
    14da:	8a 1b       	sub	r24, r26
    14dc:	9b 0b       	sbc	r25, r27
    14de:	84 17       	cp	r24, r20
    14e0:	95 07       	cpc	r25, r21
    14e2:	68 f4       	brcc	.+26     	; 0x14fe <xTaskCheckForTimeOut+0x58>
    14e4:	cf 01       	movw	r24, r30
    14e6:	a2 1b       	sub	r26, r18
    14e8:	b3 0b       	sbc	r27, r19
    14ea:	4a 0f       	add	r20, r26
    14ec:	5b 1f       	adc	r21, r27
    14ee:	59 83       	std	Y+1, r21	; 0x01
    14f0:	48 83       	st	Y, r20
    14f2:	0e 94 48 0a 	call	0x1490	; 0x1490 <vTaskSetTimeOutState>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <xTaskCheckForTimeOut+0x5a>
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	01 c0       	rjmp	.+2      	; 0x1500 <xTaskCheckForTimeOut+0x5a>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	df 91       	pop	r29
    1506:	cf 91       	pop	r28
    1508:	08 95       	ret

0000150a <vTaskMissedYield>:
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <xYieldPending>
    1510:	08 95       	ret

00001512 <uxTaskResetEventItemValue>:
    1512:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    1516:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    151a:	84 85       	ldd	r24, Z+12	; 0x0c
    151c:	95 85       	ldd	r25, Z+13	; 0x0d
    151e:	e0 91 41 06 	lds	r30, 0x0641	; 0x800641 <pxCurrentTCB>
    1522:	f0 91 42 06 	lds	r31, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    1526:	a0 91 41 06 	lds	r26, 0x0641	; 0x800641 <pxCurrentTCB>
    152a:	b0 91 42 06 	lds	r27, 0x0642	; 0x800642 <pxCurrentTCB+0x1>
    152e:	56 96       	adiw	r26, 0x16	; 22
    1530:	4c 91       	ld	r20, X
    1532:	28 e0       	ldi	r18, 0x08	; 8
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	24 1b       	sub	r18, r20
    1538:	31 09       	sbc	r19, r1
    153a:	35 87       	std	Z+13, r19	; 0x0d
    153c:	24 87       	std	Z+12, r18	; 0x0c
    153e:	08 95       	ret

00001540 <T_Control>:

		ebControlBits = xEventGroupWaitBits(egControl, E_CONTROLMASK , 0, 0, portMAX_DELAY);

		if ( (ebControlBits & E_HEATER) == E_HEATER )
		{
			if(Motors_State.Heater == ON)
    1540:	c1 e5       	ldi	r28, 0x51	; 81
    1542:	d6 e0       	ldi	r29, 0x06	; 6
{
		
	while(1)
	{

		ebControlBits = xEventGroupWaitBits(egControl, E_CONTROLMASK , 0, 0, portMAX_DELAY);
    1544:	0f ef       	ldi	r16, 0xFF	; 255
    1546:	1f ef       	ldi	r17, 0xFF	; 255
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	67 e0       	ldi	r22, 0x07	; 7
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <egControl>
    1554:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <egControl+0x1>
    1558:	0e 94 5c 00 	call	0xb8	; 0xb8 <xEventGroupWaitBits>
    155c:	80 93 54 06 	sts	0x0654, r24	; 0x800654 <ebControlBits>
    1560:	90 93 55 06 	sts	0x0655, r25	; 0x800655 <ebControlBits+0x1>

		if ( (ebControlBits & E_HEATER) == E_HEATER )
    1564:	81 ff       	sbrs	r24, 1
    1566:	06 c0       	rjmp	.+12     	; 0x1574 <T_Control+0x34>
		{
			if(Motors_State.Heater == ON)
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	11 f4       	brne	.+4      	; 0x1572 <T_Control+0x32>
			{
				SET_BIT(PORTD,HEATER);
    156e:	93 9a       	sbi	0x12, 3	; 18
    1570:	01 c0       	rjmp	.+2      	; 0x1574 <T_Control+0x34>
			}
			else
			{
				CLEAR_BIT(PORTD,HEATER);
    1572:	93 98       	cbi	0x12, 3	; 18
			}
		}

		if( (ebControlBits & E_COOLER) == E_COOLER )
    1574:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <ebControlBits>
    1578:	82 ff       	sbrs	r24, 2
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <T_Control+0x48>
		{
			if(Motors_State.Cooler == ON)
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	81 30       	cpi	r24, 0x01	; 1
    1580:	11 f4       	brne	.+4      	; 0x1586 <T_Control+0x46>
			{
				SET_BIT(PORTD,COOLER);
    1582:	94 9a       	sbi	0x12, 4	; 18
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <T_Control+0x48>
			}
			else
			{
				CLEAR_BIT(PORTD,COOLER);
    1586:	94 98       	cbi	0x12, 4	; 18
			}
		}


		if( (ebControlBits & E_PUMP) == E_PUMP )
    1588:	80 91 54 06 	lds	r24, 0x0654	; 0x800654 <ebControlBits>
    158c:	80 ff       	sbrs	r24, 0
    158e:	06 c0       	rjmp	.+12     	; 0x159c <T_Control+0x5c>
		{
			if(Motors_State.Water_Pump == ON)
    1590:	88 81       	ld	r24, Y
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	11 f4       	brne	.+4      	; 0x159a <T_Control+0x5a>
			{
				SET_BIT(PORTD,WATER_PUMP);
    1596:	92 9a       	sbi	0x12, 2	; 18
    1598:	01 c0       	rjmp	.+2      	; 0x159c <T_Control+0x5c>
			}
			else
			{
				CLEAR_BIT(PORTD,WATER_PUMP);
    159a:	92 98       	cbi	0x12, 2	; 18
			}
		}
		vTaskDelay(5);
    159c:	85 e0       	ldi	r24, 0x05	; 5
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 bb 08 	call	0x1176	; 0x1176 <vTaskDelay>
	} /* end while (1) */
    15a4:	cf cf       	rjmp	.-98     	; 0x1544 <T_Control+0x4>

000015a6 <T_SysCheck>:
 * @param pvParam 
 */
void T_SysCheck(void* pvParam)
{
	/* initial defaults */
	xEventGroupSetBits(egDisplay, E_MainScreen); 
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    15ae:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    15b2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
	xEventGroupClearBits(egControl, E_CONTROLMASK);
    15b6:	67 e0       	ldi	r22, 0x07	; 7
    15b8:	70 e0       	ldi	r23, 0x00	; 0
    15ba:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <egControl>
    15be:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <egControl+0x1>
    15c2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <xEventGroupClearBits>

	while(1)
	{
		if(xSemaphoreTake(bsCheck, portMAX_DELAY))
		{
			if(SFS.SensorData.TempData > SFS.SensorThreshold.TempT)
    15c6:	ca e4       	ldi	r28, 0x4A	; 74
    15c8:	d6 e0       	ldi	r29, 0x06	; 6
				Motors_State.Cooler = OFF;
				Motors_State.Heater = ON;
			}
			else  /* when equal */
			{
				Motors_State.Cooler = OFF;
    15ca:	01 e5       	ldi	r16, 0x51	; 81
    15cc:	16 e0       	ldi	r17, 0x06	; 6
				Motors_State.Heater = OFF;
			}
			else if(SFS.SensorData.TempData < SFS.SensorThreshold.TempT)
			{
				Motors_State.Cooler = OFF;
				Motors_State.Heater = ON;
    15ce:	ff 24       	eor	r15, r15
    15d0:	f3 94       	inc	r15
	xEventGroupSetBits(egDisplay, E_MainScreen); 
	xEventGroupClearBits(egControl, E_CONTROLMASK);

	while(1)
	{
		if(xSemaphoreTake(bsCheck, portMAX_DELAY))
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	4f ef       	ldi	r20, 0xFF	; 255
    15d6:	5f ef       	ldi	r21, 0xFF	; 255
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bsCheck>
    15e0:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <bsCheck+0x1>
    15e4:	0e 94 37 05 	call	0xa6e	; 0xa6e <xQueueGenericReceive>
    15e8:	88 23       	and	r24, r24
    15ea:	99 f3       	breq	.-26     	; 0x15d2 <T_SysCheck+0x2c>
		{
			if(SFS.SensorData.TempData > SFS.SensorThreshold.TempT)
    15ec:	99 81       	ldd	r25, Y+1	; 0x01
    15ee:	8b 81       	ldd	r24, Y+3	; 0x03
    15f0:	89 17       	cp	r24, r25
    15f2:	20 f4       	brcc	.+8      	; 0x15fc <T_SysCheck+0x56>
			{
				Motors_State.Cooler = ON;
    15f4:	f8 01       	movw	r30, r16
    15f6:	f2 82       	std	Z+2, r15	; 0x02
				Motors_State.Heater = OFF;
    15f8:	11 82       	std	Z+1, r1	; 0x01
    15fa:	09 c0       	rjmp	.+18     	; 0x160e <T_SysCheck+0x68>
			}
			else if(SFS.SensorData.TempData < SFS.SensorThreshold.TempT)
    15fc:	98 17       	cp	r25, r24
    15fe:	20 f4       	brcc	.+8      	; 0x1608 <T_SysCheck+0x62>
			{
				Motors_State.Cooler = OFF;
    1600:	f8 01       	movw	r30, r16
    1602:	12 82       	std	Z+2, r1	; 0x02
				Motors_State.Heater = ON;
    1604:	f1 82       	std	Z+1, r15	; 0x01
    1606:	03 c0       	rjmp	.+6      	; 0x160e <T_SysCheck+0x68>
			}
			else  /* when equal */
			{
				Motors_State.Cooler = OFF;
    1608:	f8 01       	movw	r30, r16
    160a:	12 82       	std	Z+2, r1	; 0x02
				Motors_State.Heater = OFF;
    160c:	11 82       	std	Z+1, r1	; 0x01
			}

			xEventGroupSetBits(egControl, E_COOLER | E_HEATER);		/* TODO */
    160e:	66 e0       	ldi	r22, 0x06	; 6
    1610:	70 e0       	ldi	r23, 0x00	; 0
    1612:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <egControl>
    1616:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <egControl+0x1>
    161a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
			vTaskDelay(10);
    161e:	8a e0       	ldi	r24, 0x0A	; 10
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	0e 94 bb 08 	call	0x1176	; 0x1176 <vTaskDelay>
			xEventGroupClearBits(egControl, E_COOLER | E_HEATER);	/* TODO */
    1626:	66 e0       	ldi	r22, 0x06	; 6
    1628:	70 e0       	ldi	r23, 0x00	; 0
    162a:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <egControl>
    162e:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <egControl+0x1>
    1632:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <xEventGroupClearBits>

			if(SFS.SensorData.HumiData >= SFS.SensorThreshold.HumiT)
    1636:	9a 81       	ldd	r25, Y+2	; 0x02
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
    163a:	98 17       	cp	r25, r24
    163c:	18 f0       	brcs	.+6      	; 0x1644 <T_SysCheck+0x9e>
			{
				Motors_State.Water_Pump = OFF;
    163e:	f8 01       	movw	r30, r16
    1640:	10 82       	st	Z, r1
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <T_SysCheck+0xa2>
			}
			else
			{
				Motors_State.Water_Pump = ON;
    1644:	f8 01       	movw	r30, r16
    1646:	f0 82       	st	Z, r15
			}

			xEventGroupSetBits(egControl, E_PUMP);
    1648:	61 e0       	ldi	r22, 0x01	; 1
    164a:	70 e0       	ldi	r23, 0x00	; 0
    164c:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <egControl>
    1650:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <egControl+0x1>
    1654:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
			vTaskDelay(10);
    1658:	8a e0       	ldi	r24, 0x0A	; 10
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 bb 08 	call	0x1176	; 0x1176 <vTaskDelay>
			xEventGroupClearBits(egControl, E_PUMP);
    1660:	61 e0       	ldi	r22, 0x01	; 1
    1662:	70 e0       	ldi	r23, 0x00	; 0
    1664:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <egControl>
    1668:	90 91 47 06 	lds	r25, 0x0647	; 0x800647 <egControl+0x1>
    166c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <xEventGroupClearBits>

			xEventGroupSetBits(egDisplay, E_MotorState); 
    1670:	60 e4       	ldi	r22, 0x40	; 64
    1672:	70 e0       	ldi	r23, 0x00	; 0
    1674:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    1678:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    167c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
    1680:	a8 cf       	rjmp	.-176    	; 0x15d2 <T_SysCheck+0x2c>

00001682 <T_Terminal>:
 * @brief terminal task
 * 
 * @param pvParam 
 */
void T_Terminal(void* pvParam)
{
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	29 97       	sbiw	r28, 0x09	; 9
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
	uint8 data;
	uint8 strTTemp[4];
	uint8 strTHumi[4];
	
	memset(strTTemp, 0, 3);
    1696:	fe 01       	movw	r30, r28
    1698:	32 96       	adiw	r30, 0x02	; 2
    169a:	83 e0       	ldi	r24, 0x03	; 3
    169c:	df 01       	movw	r26, r30
    169e:	98 2f       	mov	r25, r24
    16a0:	1d 92       	st	X+, r1
    16a2:	9a 95       	dec	r25
    16a4:	e9 f7       	brne	.-6      	; 0x16a0 <T_Terminal+0x1e>
	memset(strTHumi, 0, 3);
    16a6:	34 96       	adiw	r30, 0x04	; 4
    16a8:	df 01       	movw	r26, r30
    16aa:	1d 92       	st	X+, r1
    16ac:	8a 95       	dec	r24
    16ae:	e9 f7       	brne	.-6      	; 0x16aa <T_Terminal+0x28>

	static enum {TempReceiving = 13, HumiReceiving} ReceivingState;
	
	/* Default entry point */
	ReceivingState = TempReceiving; 
    16b0:	8d e0       	ldi	r24, 0x0D	; 13
    16b2:	80 93 43 06 	sts	0x0643, r24	; 0x800643 <ReceivingState.2521>
	uint8 i = 0;
    16b6:	b1 2c       	mov	r11, r1
		{
			case TempReceiving:
			{
				if(E_OK == UART_receiveByte_NonBlocking(&data))
				{
					if(MainState == SFS.SystemState )
    16b8:	0a e4       	ldi	r16, 0x4A	; 74
    16ba:	16 e0       	ldi	r17, 0x06	; 6
						}
						
						else if( 'N' == data)	/* the data is 'N' */
						{
							i = 0; /* to start from zero in Humidity receiving */
							memset(strTTemp, 0, 3);  /* clear temporary data */
    16bc:	6e 01       	movw	r12, r28
    16be:	b2 e0       	ldi	r27, 0x02	; 2
    16c0:	cb 0e       	add	r12, r27
    16c2:	d1 1c       	adc	r13, r1
    16c4:	0f 2e       	mov	r0, r31
    16c6:	f3 e0       	ldi	r31, 0x03	; 3
    16c8:	af 2e       	mov	r10, r31
    16ca:	f0 2d       	mov	r31, r0
							ReceivingState = HumiReceiving; 	/* Go to Humidity receiving state */
    16cc:	0f 2e       	mov	r0, r31
    16ce:	fe e0       	ldi	r31, 0x0E	; 14
    16d0:	7f 2e       	mov	r7, r31
    16d2:	f0 2d       	mov	r31, r0
					if(MainState == SFS.SystemState )
					{
						/* the data is 'C' */
						if('C' == data)	
						{
							SFS.SystemState = ConfigState;
    16d4:	88 24       	eor	r8, r8
    16d6:	83 94       	inc	r8
							i = 0; 	/* clearing index to start saving from zero in next config */
							memset(strTHumi, 0, 3);  /* clear temporary data for next config */
    16d8:	7f 01       	movw	r14, r30

					}
					
					else if('N' == data)	/* the data is 'N' */
					{
						ReceivingState = TempReceiving; 	/* Go to temp receiving state */
    16da:	0f 2e       	mov	r0, r31
    16dc:	fd e0       	ldi	r31, 0x0D	; 13
    16de:	9f 2e       	mov	r9, r31
    16e0:	f0 2d       	mov	r31, r0
	ReceivingState = TempReceiving; 
	uint8 i = 0;

	while(1)
	{
		switch (ReceivingState)
    16e2:	80 91 43 06 	lds	r24, 0x0643	; 0x800643 <ReceivingState.2521>
    16e6:	8d 30       	cpi	r24, 0x0D	; 13
    16e8:	21 f0       	breq	.+8      	; 0x16f2 <T_Terminal+0x70>
    16ea:	8e 30       	cpi	r24, 0x0E	; 14
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <T_Terminal+0x6e>
    16ee:	8b c0       	rjmp	.+278    	; 0x1806 <T_Terminal+0x184>
    16f0:	00 c1       	rjmp	.+512    	; 0x18f2 <T_Terminal+0x270>
		{
			case TempReceiving:
			{
				if(E_OK == UART_receiveByte_NonBlocking(&data))
    16f2:	ce 01       	movw	r24, r28
    16f4:	01 96       	adiw	r24, 0x01	; 1
    16f6:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_receiveByte_NonBlocking>
    16fa:	81 11       	cpse	r24, r1
    16fc:	fa c0       	rjmp	.+500    	; 0x18f2 <T_Terminal+0x270>
				{
					if(MainState == SFS.SystemState )
    16fe:	d8 01       	movw	r26, r16
    1700:	8c 91       	ld	r24, X
    1702:	81 11       	cpse	r24, r1
    1704:	14 c0       	rjmp	.+40     	; 0x172e <T_Terminal+0xac>
					{
						/* the data is 'C' */
						if('C' == data)	
    1706:	89 81       	ldd	r24, Y+1	; 0x01
    1708:	83 34       	cpi	r24, 0x43	; 67
    170a:	09 f0       	breq	.+2      	; 0x170e <T_Terminal+0x8c>
    170c:	f2 c0       	rjmp	.+484    	; 0x18f2 <T_Terminal+0x270>
						{
							SFS.SystemState = ConfigState;
    170e:	8c 92       	st	X, r8
							i = 0; 	/* clearing index to start saving from zero in next config */
							memset(strTHumi, 0, 3);  /* clear temporary data for next config */
    1710:	f7 01       	movw	r30, r14
    1712:	8a 2d       	mov	r24, r10
    1714:	11 92       	st	Z+, r1
    1716:	8a 95       	dec	r24
    1718:	e9 f7       	brne	.-6      	; 0x1714 <T_Terminal+0x92>
							xEventGroupSetBits(egDisplay, E_ConfigScreen); /* main screen */
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	70 e0       	ldi	r23, 0x00	; 0
    171e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    1722:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    1726:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
					{
						/* the data is 'C' */
						if('C' == data)	
						{
							SFS.SystemState = ConfigState;
							i = 0; 	/* clearing index to start saving from zero in next config */
    172a:	b1 2c       	mov	r11, r1
    172c:	e2 c0       	rjmp	.+452    	; 0x18f2 <T_Terminal+0x270>
						{
							
						}
					}
					
					else if (ConfigState == SFS.SystemState)
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	09 f0       	breq	.+2      	; 0x1734 <T_Terminal+0xb2>
    1732:	df c0       	rjmp	.+446    	; 0x18f2 <T_Terminal+0x270>
					{
						if('C' == data)	/* the data is 'C' */
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	83 34       	cpi	r24, 0x43	; 67
    1738:	81 f4       	brne	.+32     	; 0x175a <T_Terminal+0xd8>
						{
							SFS.SystemState = MainState;
    173a:	d8 01       	movw	r26, r16
    173c:	1c 92       	st	X, r1
							xEventGroupSetBits(egDisplay, E_MainScreen); /* Display main */
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    1746:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    174a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
							memset(strTTemp, 0, 3);  /* clear temporary data for next config */
    174e:	f6 01       	movw	r30, r12
    1750:	8a 2d       	mov	r24, r10
    1752:	11 92       	st	Z+, r1
    1754:	8a 95       	dec	r24
    1756:	e9 f7       	brne	.-6      	; 0x1752 <T_Terminal+0xd0>
    1758:	cc c0       	rjmp	.+408    	; 0x18f2 <T_Terminal+0x270>

						}

						else if(data >= '0' && data <= '9')	/* the data is digit */
    175a:	90 ed       	ldi	r25, 0xD0	; 208
    175c:	98 0f       	add	r25, r24
    175e:	9a 30       	cpi	r25, 0x0A	; 10
    1760:	50 f4       	brcc	.+20     	; 0x1776 <T_Terminal+0xf4>
						{
							if(i<3)	/* if we still did`t receive the third digit */
    1762:	92 e0       	ldi	r25, 0x02	; 2
    1764:	9b 15       	cp	r25, r11
    1766:	08 f4       	brcc	.+2      	; 0x176a <T_Terminal+0xe8>
    1768:	c4 c0       	rjmp	.+392    	; 0x18f2 <T_Terminal+0x270>
							{
								strTTemp[i] = data;
    176a:	f6 01       	movw	r30, r12
    176c:	eb 0d       	add	r30, r11
    176e:	f1 1d       	adc	r31, r1
    1770:	80 83       	st	Z, r24
								i++;
    1772:	b3 94       	inc	r11
    1774:	be c0       	rjmp	.+380    	; 0x18f2 <T_Terminal+0x270>
							}
						}
						
						else if( 'O' == data)	/* the data is 'O' */
    1776:	8f 34       	cpi	r24, 0x4F	; 79
    1778:	91 f5       	brne	.+100    	; 0x17de <T_Terminal+0x15c>
						{
							if( 0 == atoi(strTTemp) )	/* FIXME *//* if u forget to clear the buffer in some conditions, an error may appear here */
    177a:	c6 01       	movw	r24, r12
    177c:	0e 94 87 11 	call	0x230e	; 0x230e <atoi>
    1780:	00 97       	sbiw	r24, 0x00	; 0
    1782:	31 f4       	brne	.+12     	; 0x1790 <T_Terminal+0x10e>
							{
								/* Do not update the global struct if no data exist */
								memset(strTTemp, 0, 3);  /* clear temporary data */
    1784:	d6 01       	movw	r26, r12
    1786:	ea 2d       	mov	r30, r10
    1788:	1d 92       	st	X+, r1
    178a:	ea 95       	dec	r30
    178c:	e9 f7       	brne	.-6      	; 0x1788 <T_Terminal+0x106>
    178e:	1b c0       	rjmp	.+54     	; 0x17c6 <T_Terminal+0x144>
							}
							
							else
							{
								SFS.SensorThreshold.TempT = atoi(strTTemp);	/* update global threshold*/
    1790:	d8 01       	movw	r26, r16
    1792:	13 96       	adiw	r26, 0x03	; 3
    1794:	8c 93       	st	X, r24
								memset(strTTemp, 0, 3);  /* clear temporary data */
    1796:	f6 01       	movw	r30, r12
    1798:	8a 2d       	mov	r24, r10
    179a:	11 92       	st	Z+, r1
    179c:	8a 95       	dec	r24
    179e:	e9 f7       	brne	.-6      	; 0x179a <T_Terminal+0x118>
								xSemaphoreGive(bsCheck);
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	70 e0       	ldi	r23, 0x00	; 0
    17aa:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bsCheck>
    17ae:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <bsCheck+0x1>
    17b2:	0e 94 96 04 	call	0x92c	; 0x92c <xQueueGenericSend>
								xEventGroupSetBits(egDisplay, E_TTUpdated);
    17b6:	60 e1       	ldi	r22, 0x10	; 16
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    17be:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    17c2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
							}

							i = 0;
							ReceivingState = HumiReceiving; 	/* Go to Humidity receiving state */
    17c6:	70 92 43 06 	sts	0x0643, r7	; 0x800643 <ReceivingState.2521>
							xEventGroupSetBits(egDisplay, E_Next); /* in both situation, move the cursor to humidity*/
    17ca:	60 e8       	ldi	r22, 0x80	; 128
    17cc:	70 e0       	ldi	r23, 0x00	; 0
    17ce:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    17d2:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    17d6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
								memset(strTTemp, 0, 3);  /* clear temporary data */
								xSemaphoreGive(bsCheck);
								xEventGroupSetBits(egDisplay, E_TTUpdated);
							}

							i = 0;
    17da:	b1 2c       	mov	r11, r1
    17dc:	8a c0       	rjmp	.+276    	; 0x18f2 <T_Terminal+0x270>
							ReceivingState = HumiReceiving; 	/* Go to Humidity receiving state */
							xEventGroupSetBits(egDisplay, E_Next); /* in both situation, move the cursor to humidity*/

						}
						
						else if( 'N' == data)	/* the data is 'N' */
    17de:	8e 34       	cpi	r24, 0x4E	; 78
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <T_Terminal+0x162>
    17e2:	87 c0       	rjmp	.+270    	; 0x18f2 <T_Terminal+0x270>
						{
							i = 0; /* to start from zero in Humidity receiving */
							memset(strTTemp, 0, 3);  /* clear temporary data */
    17e4:	d6 01       	movw	r26, r12
    17e6:	ea 2d       	mov	r30, r10
    17e8:	1d 92       	st	X+, r1
    17ea:	ea 95       	dec	r30
    17ec:	e9 f7       	brne	.-6      	; 0x17e8 <T_Terminal+0x166>
							ReceivingState = HumiReceiving; 	/* Go to Humidity receiving state */
    17ee:	70 92 43 06 	sts	0x0643, r7	; 0x800643 <ReceivingState.2521>
							xEventGroupSetBits(egDisplay, E_Next); /* tell the display to move the cursor */
    17f2:	60 e8       	ldi	r22, 0x80	; 128
    17f4:	70 e0       	ldi	r23, 0x00	; 0
    17f6:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    17fa:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    17fe:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>

						}
						
						else if( 'N' == data)	/* the data is 'N' */
						{
							i = 0; /* to start from zero in Humidity receiving */
    1802:	b1 2c       	mov	r11, r1
    1804:	76 c0       	rjmp	.+236    	; 0x18f2 <T_Terminal+0x270>
				} /* end if Data exist in uart */
			}break;
			
			case HumiReceiving:
			{
				if(E_OK == UART_receiveByte_NonBlocking(&data)) /* if new data exist on terminal */
    1806:	ce 01       	movw	r24, r28
    1808:	01 96       	adiw	r24, 0x01	; 1
    180a:	0e 94 2f 10 	call	0x205e	; 0x205e <UART_receiveByte_NonBlocking>
    180e:	81 11       	cpse	r24, r1
    1810:	70 c0       	rjmp	.+224    	; 0x18f2 <T_Terminal+0x270>
				{
					if('C' == data)	/* the data is 'C' */
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	83 34       	cpi	r24, 0x43	; 67
    1816:	99 f4       	brne	.+38     	; 0x183e <T_Terminal+0x1bc>
					{
						ReceivingState = TempReceiving;
    1818:	90 92 43 06 	sts	0x0643, r9	; 0x800643 <ReceivingState.2521>
						i = 0; 	/* clearing index to start saving from zero in next config */
						memset(strTHumi, 0, 3);  /* clear temporary data for next config */
    181c:	d7 01       	movw	r26, r14
    181e:	ea 2d       	mov	r30, r10
    1820:	1d 92       	st	X+, r1
    1822:	ea 95       	dec	r30
    1824:	e9 f7       	brne	.-6      	; 0x1820 <T_Terminal+0x19e>
						SFS.SystemState = MainState;
    1826:	d8 01       	movw	r26, r16
    1828:	1c 92       	st	X, r1
						xEventGroupSetBits(egDisplay, E_MainScreen); /* Display main */
    182a:	61 e0       	ldi	r22, 0x01	; 1
    182c:	70 e0       	ldi	r23, 0x00	; 0
    182e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    1832:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    1836:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
				if(E_OK == UART_receiveByte_NonBlocking(&data)) /* if new data exist on terminal */
				{
					if('C' == data)	/* the data is 'C' */
					{
						ReceivingState = TempReceiving;
						i = 0; 	/* clearing index to start saving from zero in next config */
    183a:	b1 2c       	mov	r11, r1
    183c:	5a c0       	rjmp	.+180    	; 0x18f2 <T_Terminal+0x270>
						memset(strTHumi, 0, 3);  /* clear temporary data for next config */
						SFS.SystemState = MainState;
						xEventGroupSetBits(egDisplay, E_MainScreen); /* Display main */
					}
					
					else if( '9' >= data && '0' <= data)	/* the data is digit */
    183e:	90 ed       	ldi	r25, 0xD0	; 208
    1840:	98 0f       	add	r25, r24
    1842:	9a 30       	cpi	r25, 0x0A	; 10
    1844:	50 f4       	brcc	.+20     	; 0x185a <T_Terminal+0x1d8>
					{
						if(3 > i)	/* if we still did`t receive the third digit */
    1846:	b2 e0       	ldi	r27, 0x02	; 2
    1848:	bb 15       	cp	r27, r11
    184a:	08 f4       	brcc	.+2      	; 0x184e <T_Terminal+0x1cc>
    184c:	52 c0       	rjmp	.+164    	; 0x18f2 <T_Terminal+0x270>
						{
							strTHumi[i] = data;
    184e:	f7 01       	movw	r30, r14
    1850:	eb 0d       	add	r30, r11
    1852:	f1 1d       	adc	r31, r1
    1854:	80 83       	st	Z, r24
							i++;
    1856:	b3 94       	inc	r11
    1858:	4c c0       	rjmp	.+152    	; 0x18f2 <T_Terminal+0x270>
						}
									
					}
					
					else if('O' == data)	/* the data is 'O' */
    185a:	8f 34       	cpi	r24, 0x4F	; 79
    185c:	b9 f5       	brne	.+110    	; 0x18cc <T_Terminal+0x24a>
					{
						if( 0 == atoi(strTHumi) )  /* if u forget to clear the buffer in some conditions, an error may appear here */
    185e:	c7 01       	movw	r24, r14
    1860:	0e 94 87 11 	call	0x230e	; 0x230e <atoi>
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	31 f4       	brne	.+12     	; 0x1874 <T_Terminal+0x1f2>
						{
							memset(strTTemp, 0, 3);  /* clear temporary data */
    1868:	f6 01       	movw	r30, r12
    186a:	8a 2d       	mov	r24, r10
    186c:	11 92       	st	Z+, r1
    186e:	8a 95       	dec	r24
    1870:	e9 f7       	brne	.-6      	; 0x186c <T_Terminal+0x1ea>
    1872:	1f c0       	rjmp	.+62     	; 0x18b2 <T_Terminal+0x230>
						}
						
						else
						{
							SFS.SensorThreshold.HumiT = atoi(strTHumi);	/* update global threshold*/
    1874:	d8 01       	movw	r26, r16
    1876:	14 96       	adiw	r26, 0x04	; 4
    1878:	8c 93       	st	X, r24
							memset(strTTemp, 0, 3);  /* clear temporary data */
    187a:	f6 01       	movw	r30, r12
    187c:	8a 2d       	mov	r24, r10
    187e:	11 92       	st	Z+, r1
    1880:	8a 95       	dec	r24
    1882:	e9 f7       	brne	.-6      	; 0x187e <T_Terminal+0x1fc>
							xSemaphoreGive(bsCheck);
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	50 e0       	ldi	r21, 0x00	; 0
    188a:	60 e0       	ldi	r22, 0x00	; 0
    188c:	70 e0       	ldi	r23, 0x00	; 0
    188e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bsCheck>
    1892:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <bsCheck+0x1>
    1896:	0e 94 96 04 	call	0x92c	; 0x92c <xQueueGenericSend>
							xEventGroupSetBits(egDisplay, E_HTUpdated);
    189a:	60 e2       	ldi	r22, 0x20	; 32
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    18a2:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    18a6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
							vTaskDelay(500);
    18aa:	84 ef       	ldi	r24, 0xF4	; 244
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	0e 94 bb 08 	call	0x1176	; 0x1176 <vTaskDelay>
						}

						ReceivingState = TempReceiving; /* next state */
    18b2:	90 92 43 06 	sts	0x0643, r9	; 0x800643 <ReceivingState.2521>
						SFS.SystemState = MainState;
    18b6:	d8 01       	movw	r26, r16
    18b8:	1c 92       	st	X, r1
						xEventGroupSetBits(egDisplay, E_MainScreen); /* in both cases go to main screen */
    18ba:	61 e0       	ldi	r22, 0x01	; 1
    18bc:	70 e0       	ldi	r23, 0x00	; 0
    18be:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    18c2:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    18c6:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
    18ca:	13 c0       	rjmp	.+38     	; 0x18f2 <T_Terminal+0x270>

					}
					
					else if('N' == data)	/* the data is 'N' */
    18cc:	8e 34       	cpi	r24, 0x4E	; 78
    18ce:	89 f4       	brne	.+34     	; 0x18f2 <T_Terminal+0x270>
					{
						ReceivingState = TempReceiving; 	/* Go to temp receiving state */
    18d0:	90 92 43 06 	sts	0x0643, r9	; 0x800643 <ReceivingState.2521>
						SFS.SystemState = MainState;
    18d4:	f8 01       	movw	r30, r16
    18d6:	10 82       	st	Z, r1
						xEventGroupSetBits(egDisplay, E_MainScreen);
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	70 e0       	ldi	r23, 0x00	; 0
    18dc:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    18e0:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    18e4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
						memset(strTTemp, 0, 3);  /* clear temporary data */
    18e8:	d6 01       	movw	r26, r12
    18ea:	ea 2d       	mov	r30, r10
    18ec:	1d 92       	st	X+, r1
    18ee:	ea 95       	dec	r30
    18f0:	e9 f7       	brne	.-6      	; 0x18ec <T_Terminal+0x26a>
			}break;

			default:
				break;
		}	/* end of switch case */
	vTaskDelay(50);  /* Task periodicity is 50ms */
    18f2:	82 e3       	ldi	r24, 0x32	; 50
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <vTaskDelay>
	} /* end of while 1 */
    18fa:	f3 ce       	rjmp	.-538    	; 0x16e2 <T_Terminal+0x60>

000018fc <T_Sensing>:
 * @brief Sensing task
 * 
 * @param pvParam 
 */
void T_Sensing(void* pvParam)
{
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	00 d0       	rcall	.+0      	; 0x1902 <T_Sensing+0x6>
    1902:	cd b7       	in	r28, 0x3d	; 61
    1904:	de b7       	in	r29, 0x3e	; 62
	uint8 tempValue = 0;
    1906:	19 82       	std	Y+1, r1	; 0x01
	uint8 humiValue = 0;
    1908:	1a 82       	std	Y+2, r1	; 0x02

	while(1)
	{
		if(E_OK == TEMP_u16_Read(&tempValue))
		{
			if(  SFS.SensorData.TempData != tempValue )
    190a:	0a e4       	ldi	r16, 0x4A	; 74
    190c:	16 e0       	ldi	r17, 0x06	; 6
	uint8 tempValue = 0;
	uint8 humiValue = 0;

	while(1)
	{
		if(E_OK == TEMP_u16_Read(&tempValue))
    190e:	ce 01       	movw	r24, r28
    1910:	01 96       	adiw	r24, 0x01	; 1
    1912:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <TEMP_u16_Read>
    1916:	81 11       	cpse	r24, r1
    1918:	19 c0       	rjmp	.+50     	; 0x194c <T_Sensing+0x50>
		{
			if(  SFS.SensorData.TempData != tempValue )
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	f8 01       	movw	r30, r16
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	98 17       	cp	r25, r24
    1922:	a1 f0       	breq	.+40     	; 0x194c <T_Sensing+0x50>
			{
				SFS.SensorData.TempData= tempValue;
    1924:	81 83       	std	Z+1, r24	; 0x01
				xSemaphoreGive(bsCheck); /* sys check */
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	50 e0       	ldi	r21, 0x00	; 0
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bsCheck>
    1934:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <bsCheck+0x1>
    1938:	0e 94 96 04 	call	0x92c	; 0x92c <xQueueGenericSend>
				xEventGroupSetBits(egDisplay,E_TUpdated);
    193c:	68 e0       	ldi	r22, 0x08	; 8
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    1944:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    1948:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
		else
		{
						
		}

		if(E_OK == Humit_u16_Read(&humiValue))
    194c:	ce 01       	movw	r24, r28
    194e:	02 96       	adiw	r24, 0x02	; 2
    1950:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <Humit_u16_Read>
    1954:	81 11       	cpse	r24, r1
    1956:	19 c0       	rjmp	.+50     	; 0x198a <T_Sensing+0x8e>
		{
			if ( SFS.SensorData.HumiData!= humiValue )
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	f8 01       	movw	r30, r16
    195c:	92 81       	ldd	r25, Z+2	; 0x02
    195e:	98 17       	cp	r25, r24
    1960:	a1 f0       	breq	.+40     	; 0x198a <T_Sensing+0x8e>
			{
				SFS.SensorData.HumiData = humiValue;
    1962:	82 83       	std	Z+2, r24	; 0x02
				xSemaphoreGive(bsCheck);
    1964:	20 e0       	ldi	r18, 0x00	; 0
    1966:	40 e0       	ldi	r20, 0x00	; 0
    1968:	50 e0       	ldi	r21, 0x00	; 0
    196a:	60 e0       	ldi	r22, 0x00	; 0
    196c:	70 e0       	ldi	r23, 0x00	; 0
    196e:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <bsCheck>
    1972:	90 91 49 06 	lds	r25, 0x0649	; 0x800649 <bsCheck+0x1>
    1976:	0e 94 96 04 	call	0x92c	; 0x92c <xQueueGenericSend>
				xEventGroupSetBits(egDisplay,E_HUpdated);
    197a:	64 e0       	ldi	r22, 0x04	; 4
    197c:	70 e0       	ldi	r23, 0x00	; 0
    197e:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    1982:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    1986:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <xEventGroupSetBits>
		
		else
		{
						
		}
		vTaskDelay(500);  	/* Task periodicity is 1 sec */
    198a:	84 ef       	ldi	r24, 0xF4	; 244
    198c:	91 e0       	ldi	r25, 0x01	; 1
    198e:	0e 94 bb 08 	call	0x1176	; 0x1176 <vTaskDelay>
	}
    1992:	bd cf       	rjmp	.-134    	; 0x190e <T_Sensing+0x12>

00001994 <T_Display>:
	{
		ebDisplayBits = xEventGroupWaitBits(egDisplay,E_DISPLAYMASK,1,0,portMAX_DELAY);

		if( (ebDisplayBits & E_MainScreen) == E_MainScreen)
		{					
			if( MainState == SFS.SystemState )
    1994:	ca e4       	ldi	r28, 0x4A	; 74
    1996:	d6 e0       	ldi	r29, 0x06	; 6
				LCD_intgerToString(SFS.SensorThreshold.HumiT);

				LCD_goToRowColumn(2,0);
				LCD_displayString(LCD_MAIN_SCREEN_L3);
							
				if(Motors_State.Water_Pump == ON)
    1998:	0f 2e       	mov	r0, r31
    199a:	f1 e5       	ldi	r31, 0x51	; 81
    199c:	ef 2e       	mov	r14, r31
    199e:	f6 e0       	ldi	r31, 0x06	; 6
    19a0:	ff 2e       	mov	r15, r31
    19a2:	f0 2d       	mov	r31, r0
 */
void T_Display(void* pvParam)
{
	while(1)
	{
		ebDisplayBits = xEventGroupWaitBits(egDisplay,E_DISPLAYMASK,1,0,portMAX_DELAY);
    19a4:	0f ef       	ldi	r16, 0xFF	; 255
    19a6:	1f ef       	ldi	r17, 0xFF	; 255
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	6f ef       	ldi	r22, 0xFF	; 255
    19ae:	70 e0       	ldi	r23, 0x00	; 0
    19b0:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <egDisplay>
    19b4:	90 91 45 06 	lds	r25, 0x0645	; 0x800645 <egDisplay+0x1>
    19b8:	0e 94 5c 00 	call	0xb8	; 0xb8 <xEventGroupWaitBits>
    19bc:	80 93 4f 06 	sts	0x064F, r24	; 0x80064f <ebDisplayBits>
    19c0:	90 93 50 06 	sts	0x0650, r25	; 0x800650 <ebDisplayBits+0x1>

		if( (ebDisplayBits & E_MainScreen) == E_MainScreen)
    19c4:	80 ff       	sbrs	r24, 0
    19c6:	d0 c0       	rjmp	.+416    	; 0x1b68 <T_Display+0x1d4>
		{					
			if( MainState == SFS.SystemState )
    19c8:	88 81       	ld	r24, Y
    19ca:	81 11       	cpse	r24, r1
    19cc:	cd c0       	rjmp	.+410    	; 0x1b68 <T_Display+0x1d4>
			{
				LCD_clearScreen();
    19ce:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_clearScreen>
				LCD_displayString(LCD_MAIN_SCREEN_L1);
    19d2:	87 e6       	ldi	r24, 0x67	; 103
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>

				LCD_goToRowColumn(0,LCD_TEMP_COL);
    19da:	64 e0       	ldi	r22, 0x04	; 4
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString("   ");
    19e2:	82 ea       	ldi	r24, 0xA2	; 162
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				LCD_goToRowColumn(0,LCD_TEMP_COL);
    19ea:	64 e0       	ldi	r22, 0x04	; 4
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_intgerToString(SFS.SensorData.TempData);
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>

				LCD_goToRowColumn(0,LCD_HUMI_COL);
    19fa:	60 e1       	ldi	r22, 0x10	; 16
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString("   ");
    1a02:	82 ea       	ldi	r24, 0xA2	; 162
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				LCD_goToRowColumn(0,LCD_HUMI_COL);
    1a0a:	60 e1       	ldi	r22, 0x10	; 16
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_intgerToString(SFS.SensorData.HumiData);
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>

				LCD_goToRowColumn(1,0);
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString(LCD_MAIN_SCREEN_L2);
    1a22:	8c e7       	ldi	r24, 0x7C	; 124
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>

				LCD_goToRowColumn(1,LCD_TEMP_COL);
    1a2a:	64 e0       	ldi	r22, 0x04	; 4
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString("   ");
    1a32:	82 ea       	ldi	r24, 0xA2	; 162
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				LCD_goToRowColumn(1,LCD_TEMP_COL);
    1a3a:	64 e0       	ldi	r22, 0x04	; 4
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_intgerToString(SFS.SensorThreshold.TempT);
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>

				LCD_goToRowColumn(1,LCD_HUMI_COL);
    1a4a:	60 e1       	ldi	r22, 0x10	; 16
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString("   ");
    1a52:	82 ea       	ldi	r24, 0xA2	; 162
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				LCD_goToRowColumn(1,LCD_HUMI_COL);
    1a5a:	60 e1       	ldi	r22, 0x10	; 16
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_intgerToString(SFS.SensorThreshold.HumiT);
    1a62:	8c 81       	ldd	r24, Y+4	; 0x04
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>

				LCD_goToRowColumn(2,0);
    1a6a:	60 e0       	ldi	r22, 0x00	; 0
    1a6c:	82 e0       	ldi	r24, 0x02	; 2
    1a6e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString(LCD_MAIN_SCREEN_L3);
    1a72:	81 e9       	ldi	r24, 0x91	; 145
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
							
				if(Motors_State.Water_Pump == ON)
    1a7a:	f7 01       	movw	r30, r14
    1a7c:	80 81       	ld	r24, Z
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	89 f4       	brne	.+34     	; 0x1aa4 <T_Display+0x110>
				{
					LCD_goToRowColumn(2,LCD_PUMP_COL);
    1a82:	61 e1       	ldi	r22, 0x11	; 17
    1a84:	82 e0       	ldi	r24, 0x02	; 2
    1a86:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1a8a:	82 ea       	ldi	r24, 0xA2	; 162
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(2,LCD_PUMP_COL);
    1a92:	61 e1       	ldi	r22, 0x11	; 17
    1a94:	82 e0       	ldi	r24, 0x02	; 2
    1a96:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("ON");
    1a9a:	86 ea       	ldi	r24, 0xA6	; 166
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1aa2:	10 c0       	rjmp	.+32     	; 0x1ac4 <T_Display+0x130>
				}
				else
				{
					LCD_goToRowColumn(2,LCD_PUMP_COL);
    1aa4:	61 e1       	ldi	r22, 0x11	; 17
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1aac:	82 ea       	ldi	r24, 0xA2	; 162
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(2,LCD_PUMP_COL);
    1ab4:	61 e1       	ldi	r22, 0x11	; 17
    1ab6:	82 e0       	ldi	r24, 0x02	; 2
    1ab8:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("OFF");
    1abc:	89 ea       	ldi	r24, 0xA9	; 169
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				}

				if(Motors_State.Heater == ON)
    1ac4:	f7 01       	movw	r30, r14
    1ac6:	81 81       	ldd	r24, Z+1	; 0x01
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	89 f4       	brne	.+34     	; 0x1aee <T_Display+0x15a>
				{
					LCD_goToRowColumn(2,LCD_HEATER_COL);
    1acc:	62 e0       	ldi	r22, 0x02	; 2
    1ace:	82 e0       	ldi	r24, 0x02	; 2
    1ad0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1ad4:	82 ea       	ldi	r24, 0xA2	; 162
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(2,LCD_HEATER_COL);
    1adc:	62 e0       	ldi	r22, 0x02	; 2
    1ade:	82 e0       	ldi	r24, 0x02	; 2
    1ae0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("ON");
    1ae4:	86 ea       	ldi	r24, 0xA6	; 166
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1aec:	10 c0       	rjmp	.+32     	; 0x1b0e <T_Display+0x17a>
				}
				else
				{
					LCD_goToRowColumn(2,LCD_HEATER_COL);
    1aee:	62 e0       	ldi	r22, 0x02	; 2
    1af0:	82 e0       	ldi	r24, 0x02	; 2
    1af2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1af6:	82 ea       	ldi	r24, 0xA2	; 162
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(2,LCD_HEATER_COL);
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("OFF");
    1b06:	89 ea       	ldi	r24, 0xA9	; 169
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				}

				if(Motors_State.Cooler == ON)
    1b0e:	f7 01       	movw	r30, r14
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	81 30       	cpi	r24, 0x01	; 1
    1b14:	89 f4       	brne	.+34     	; 0x1b38 <T_Display+0x1a4>
				{
					LCD_goToRowColumn(2,LCD_COOLER_COL);
    1b16:	6a e0       	ldi	r22, 0x0A	; 10
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1b1e:	82 ea       	ldi	r24, 0xA2	; 162
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(2,LCD_COOLER_COL);
    1b26:	6a e0       	ldi	r22, 0x0A	; 10
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("ON");
    1b2e:	86 ea       	ldi	r24, 0xA6	; 166
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1b36:	10 c0       	rjmp	.+32     	; 0x1b58 <T_Display+0x1c4>
				}
				else
				{
					LCD_goToRowColumn(2,LCD_COOLER_COL);
    1b38:	6a e0       	ldi	r22, 0x0A	; 10
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1b40:	82 ea       	ldi	r24, 0xA2	; 162
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(2,LCD_COOLER_COL);
    1b48:	6a e0       	ldi	r22, 0x0A	; 10
    1b4a:	82 e0       	ldi	r24, 0x02	; 2
    1b4c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("OFF");
    1b50:	89 ea       	ldi	r24, 0xA9	; 169
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
				}
										
				LCD_goToRowColumn(3,0);
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
				LCD_displayString(LCD_MAIN_SCREEN_L4);
    1b60:	8d ea       	ldi	r24, 0xAD	; 173
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
							
				} /*end of if MainState*/
						
			}

			if( (ebDisplayBits & E_ConfigScreen) == E_ConfigScreen)
    1b68:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1b6c:	81 ff       	sbrs	r24, 1
    1b6e:	1c c0       	rjmp	.+56     	; 0x1ba8 <T_Display+0x214>
			{
				if(ConfigState == SFS.SystemState)
    1b70:	88 81       	ld	r24, Y
    1b72:	81 30       	cpi	r24, 0x01	; 1
    1b74:	c9 f4       	brne	.+50     	; 0x1ba8 <T_Display+0x214>
				{
					LCD_clearScreen();
    1b76:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <LCD_clearScreen>
					LCD_displayString(LCD_CONFIG_SCREEN_L1);
    1b7a:	82 ec       	ldi	r24, 0xC2	; 194
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_displayString(LCD_CONFIG_SCREEN_L2);
    1b82:	87 ed       	ldi	r24, 0xD7	; 215
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(3,0);
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString(LCD_CONFIG_SCREEN_L4);
    1b92:	8c ee       	ldi	r24, 0xEC	; 236
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>

					LCD_goToRowColumn(0,LCD_CONFIG_COL);
    1b9a:	6e e0       	ldi	r22, 0x0E	; 14
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_sendCommand(CURSOR_BLINK);
    1ba2:	8f e0       	ldi	r24, 0x0F	; 15
    1ba4:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
				}

			}
						
			if( (ebDisplayBits & E_TTUpdated) == E_TTUpdated)
    1ba8:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1bac:	84 ff       	sbrs	r24, 4
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <T_Display+0x23a>
			{
				if(ConfigState == SFS.SystemState)
    1bb0:	88 81       	ld	r24, Y
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <T_Display+0x224>
    1bb6:	ce c0       	rjmp	.+412    	; 0x1d54 <T_Display+0x3c0>
				{
					LCD_goToRowColumn(0,LCD_CONFIG_COL);
    1bb8:	6e e0       	ldi	r22, 0x0E	; 14
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_sendCommand(CURSOR_OFF);
    1bc0:	8c e0       	ldi	r24, 0x0C	; 12
    1bc2:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
					LCD_intgerToString(SFS.SensorThreshold.TempT);
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>
				}
			}

			if( (ebDisplayBits & E_HTUpdated) == E_HTUpdated)
    1bce:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1bd2:	85 ff       	sbrs	r24, 5
    1bd4:	0e c0       	rjmp	.+28     	; 0x1bf2 <T_Display+0x25e>
			{
				if(ConfigState == SFS.SystemState)
    1bd6:	88 81       	ld	r24, Y
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	c9 f4       	brne	.+50     	; 0x1c0e <T_Display+0x27a>
				{
					LCD_goToRowColumn(2,LCD_CONFIG_COL);
    1bdc:	6e e0       	ldi	r22, 0x0E	; 14
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_sendCommand(CURSOR_OFF);
    1be4:	8c e0       	ldi	r24, 0x0C	; 12
    1be6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
					LCD_intgerToString(SFS.SensorThreshold.HumiT);
    1bea:	8c 81       	ldd	r24, Y+4	; 0x04
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>
				}
			}

			if( (ebDisplayBits & E_Next) == E_Next)
    1bf2:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1bf6:	87 ff       	sbrs	r24, 7
    1bf8:	0a c0       	rjmp	.+20     	; 0x1c0e <T_Display+0x27a>
			{
				if(ConfigState == SFS.SystemState)
    1bfa:	88 81       	ld	r24, Y
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	39 f4       	brne	.+14     	; 0x1c0e <T_Display+0x27a>
				{
					LCD_goToRowColumn(2,LCD_CONFIG_COL);
    1c00:	6e e0       	ldi	r22, 0x0E	; 14
    1c02:	82 e0       	ldi	r24, 0x02	; 2
    1c04:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_sendCommand(CURSOR_BLINK);
    1c08:	8f e0       	ldi	r24, 0x0F	; 15
    1c0a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
				}
			}

			if( (ebDisplayBits & E_TUpdated) == E_TUpdated)
    1c0e:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1c12:	83 ff       	sbrs	r24, 3
    1c14:	12 c0       	rjmp	.+36     	; 0x1c3a <T_Display+0x2a6>
			{
				if(MainState == SFS.SystemState)
    1c16:	88 81       	ld	r24, Y
    1c18:	81 11       	cpse	r24, r1
    1c1a:	a1 c0       	rjmp	.+322    	; 0x1d5e <T_Display+0x3ca>
				{
					LCD_goToRowColumn(0,LCD_TEMP_COL);
    1c1c:	64 e0       	ldi	r22, 0x04	; 4
    1c1e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1c22:	82 ea       	ldi	r24, 0xA2	; 162
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(0,LCD_TEMP_COL);
    1c2a:	64 e0       	ldi	r22, 0x04	; 4
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_intgerToString(SFS.SensorData.TempData);
    1c32:	89 81       	ldd	r24, Y+1	; 0x01
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>
				}
			}

			if( (ebDisplayBits & E_HUpdated) == E_HUpdated)
    1c3a:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1c3e:	82 ff       	sbrs	r24, 2
    1c40:	12 c0       	rjmp	.+36     	; 0x1c66 <T_Display+0x2d2>
			{
				if(MainState == SFS.SystemState)
    1c42:	88 81       	ld	r24, Y
    1c44:	81 11       	cpse	r24, r1
    1c46:	ae ce       	rjmp	.-676    	; 0x19a4 <T_Display+0x10>
				{
					LCD_goToRowColumn(0,LCD_HUMI_COL);
    1c48:	60 e1       	ldi	r22, 0x10	; 16
    1c4a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_displayString("   ");
    1c4e:	82 ea       	ldi	r24, 0xA2	; 162
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					LCD_goToRowColumn(0,LCD_HUMI_COL);
    1c56:	60 e1       	ldi	r22, 0x10	; 16
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
					LCD_intgerToString(SFS.SensorData.HumiData);
    1c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_intgerToString>
				}
			}

			if(MainState == SFS.SystemState)
    1c66:	88 81       	ld	r24, Y
    1c68:	81 11       	cpse	r24, r1
    1c6a:	9c ce       	rjmp	.-712    	; 0x19a4 <T_Display+0x10>
			{
				if( (ebDisplayBits & E_MotorState) == E_MotorState)
    1c6c:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1c70:	86 ff       	sbrs	r24, 6
    1c72:	98 ce       	rjmp	.-720    	; 0x19a4 <T_Display+0x10>
				{
					if(Motors_State.Water_Pump == ON)
    1c74:	f7 01       	movw	r30, r14
    1c76:	80 81       	ld	r24, Z
    1c78:	81 30       	cpi	r24, 0x01	; 1
    1c7a:	89 f4       	brne	.+34     	; 0x1c9e <T_Display+0x30a>
					{
						LCD_goToRowColumn(2,LCD_PUMP_COL);
    1c7c:	61 e1       	ldi	r22, 0x11	; 17
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("   ");
    1c84:	82 ea       	ldi	r24, 0xA2	; 162
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
						LCD_goToRowColumn(2,LCD_PUMP_COL);
    1c8c:	61 e1       	ldi	r22, 0x11	; 17
    1c8e:	82 e0       	ldi	r24, 0x02	; 2
    1c90:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("ON");
    1c94:	86 ea       	ldi	r24, 0xA6	; 166
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1c9c:	10 c0       	rjmp	.+32     	; 0x1cbe <T_Display+0x32a>
					}
					else
					{
						LCD_goToRowColumn(2,LCD_PUMP_COL);
    1c9e:	61 e1       	ldi	r22, 0x11	; 17
    1ca0:	82 e0       	ldi	r24, 0x02	; 2
    1ca2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("   ");
    1ca6:	82 ea       	ldi	r24, 0xA2	; 162
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
						LCD_goToRowColumn(2,LCD_PUMP_COL);
    1cae:	61 e1       	ldi	r22, 0x11	; 17
    1cb0:	82 e0       	ldi	r24, 0x02	; 2
    1cb2:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("OFF");
    1cb6:	89 ea       	ldi	r24, 0xA9	; 169
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					}

					if(Motors_State.Heater == ON)
    1cbe:	f7 01       	movw	r30, r14
    1cc0:	81 81       	ldd	r24, Z+1	; 0x01
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	89 f4       	brne	.+34     	; 0x1ce8 <T_Display+0x354>
					{
						LCD_goToRowColumn(2,LCD_HEATER_COL);
    1cc6:	62 e0       	ldi	r22, 0x02	; 2
    1cc8:	82 e0       	ldi	r24, 0x02	; 2
    1cca:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("   ");
    1cce:	82 ea       	ldi	r24, 0xA2	; 162
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
						LCD_goToRowColumn(2,LCD_HEATER_COL);
    1cd6:	62 e0       	ldi	r22, 0x02	; 2
    1cd8:	82 e0       	ldi	r24, 0x02	; 2
    1cda:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("ON");
    1cde:	86 ea       	ldi	r24, 0xA6	; 166
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1ce6:	10 c0       	rjmp	.+32     	; 0x1d08 <T_Display+0x374>
					}
					else
					{
						LCD_goToRowColumn(2,LCD_HEATER_COL);
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	82 e0       	ldi	r24, 0x02	; 2
    1cec:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("   ");
    1cf0:	82 ea       	ldi	r24, 0xA2	; 162
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
						LCD_goToRowColumn(2,LCD_HEATER_COL);
    1cf8:	62 e0       	ldi	r22, 0x02	; 2
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("OFF");
    1d00:	89 ea       	ldi	r24, 0xA9	; 169
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
					}

					if(Motors_State.Cooler == ON)
    1d08:	f7 01       	movw	r30, r14
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	89 f4       	brne	.+34     	; 0x1d32 <T_Display+0x39e>
					{
						LCD_goToRowColumn(2,LCD_COOLER_COL);
    1d10:	6a e0       	ldi	r22, 0x0A	; 10
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("   ");
    1d18:	82 ea       	ldi	r24, 0xA2	; 162
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
						LCD_goToRowColumn(2,LCD_COOLER_COL);
    1d20:	6a e0       	ldi	r22, 0x0A	; 10
    1d22:	82 e0       	ldi	r24, 0x02	; 2
    1d24:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("ON");
    1d28:	86 ea       	ldi	r24, 0xA6	; 166
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1d30:	39 ce       	rjmp	.-910    	; 0x19a4 <T_Display+0x10>
					}
					else
					{
						LCD_goToRowColumn(2,LCD_COOLER_COL);
    1d32:	6a e0       	ldi	r22, 0x0A	; 10
    1d34:	82 e0       	ldi	r24, 0x02	; 2
    1d36:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("   ");
    1d3a:	82 ea       	ldi	r24, 0xA2	; 162
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
						LCD_goToRowColumn(2,LCD_COOLER_COL);
    1d42:	6a e0       	ldi	r22, 0x0A	; 10
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <LCD_goToRowColumn>
						LCD_displayString("OFF");
    1d4a:	89 ea       	ldi	r24, 0xA9	; 169
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1d52:	28 ce       	rjmp	.-944    	; 0x19a4 <T_Display+0x10>
					LCD_sendCommand(CURSOR_OFF);
					LCD_intgerToString(SFS.SensorThreshold.TempT);
				}
			}

			if( (ebDisplayBits & E_HTUpdated) == E_HTUpdated)
    1d54:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1d58:	85 fd       	sbrc	r24, 5
    1d5a:	59 cf       	rjmp	.-334    	; 0x1c0e <T_Display+0x27a>
    1d5c:	4a cf       	rjmp	.-364    	; 0x1bf2 <T_Display+0x25e>
					LCD_goToRowColumn(0,LCD_TEMP_COL);
					LCD_intgerToString(SFS.SensorData.TempData);
				}
			}

			if( (ebDisplayBits & E_HUpdated) == E_HUpdated)
    1d5e:	80 91 4f 06 	lds	r24, 0x064F	; 0x80064f <ebDisplayBits>
    1d62:	82 fd       	sbrc	r24, 2
    1d64:	1f ce       	rjmp	.-962    	; 0x19a4 <T_Display+0x10>
    1d66:	7f cf       	rjmp	.-258    	; 0x1c66 <T_Display+0x2d2>

00001d68 <System_Init>:


void System_Init(void)
{
	/* lcd init */
	LCD_init();
    1d68:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <LCD_init>

	/* ADC init */
	ADC_init();
    1d6c:	0e 94 0f 10 	call	0x201e	; 0x201e <ADC_init>

	/* MOTORS */
	SET_BIT(DDRD,WATER_PUMP);
    1d70:	8a 9a       	sbi	0x11, 2	; 17
	SET_BIT(DDRD,HEATER);
    1d72:	8b 9a       	sbi	0x11, 3	; 17
	SET_BIT(DDRD,COOLER);
    1d74:	8c 9a       	sbi	0x11, 4	; 17

	/* initialize to defaults Zero*/
	CLEAR_BIT(PORTD,WATER_PUMP);
    1d76:	92 98       	cbi	0x12, 2	; 18
	CLEAR_BIT(PORTD,HEATER);
    1d78:	93 98       	cbi	0x12, 3	; 18
	CLEAR_BIT(PORTD,COOLER);
    1d7a:	94 98       	cbi	0x12, 4	; 18

	/*Defaults initialize */
	SFS.SensorData.TempData = 20;
    1d7c:	ea e4       	ldi	r30, 0x4A	; 74
    1d7e:	f6 e0       	ldi	r31, 0x06	; 6
    1d80:	94 e1       	ldi	r25, 0x14	; 20
    1d82:	91 83       	std	Z+1, r25	; 0x01
	SFS.SensorData.HumiData = 30;
    1d84:	8e e1       	ldi	r24, 0x1E	; 30
    1d86:	82 83       	std	Z+2, r24	; 0x02
	SFS.SensorThreshold.TempT = 20;
    1d88:	93 83       	std	Z+3, r25	; 0x03
	SFS.SensorThreshold.HumiT = 30;
    1d8a:	84 83       	std	Z+4, r24	; 0x04

	/* uart init*/
	UART_init();
    1d8c:	0e 94 21 10 	call	0x2042	; 0x2042 <UART_init>
	UART_sendString("System started\r\n");
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	91 e0       	ldi	r25, 0x01	; 1
    1d94:	0e 94 38 10 	call	0x2070	; 0x2070 <UART_sendString>
    1d98:	08 95       	ret

00001d9a <main>:

} SFS;


int main(void)
{
    1d9a:	af 92       	push	r10
    1d9c:	bf 92       	push	r11
    1d9e:	cf 92       	push	r12
    1da0:	df 92       	push	r13
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
	/* os init */
	System_Init();
    1da8:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <System_Init>

	/* OS Object Creation */
	egControl = xEventGroupCreate();
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <xEventGroupCreate>
    1db0:	90 93 47 06 	sts	0x0647, r25	; 0x800647 <egControl+0x1>
    1db4:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <egControl>
	egDisplay = xEventGroupCreate();
    1db8:	0e 94 49 00 	call	0x92	; 0x92 <xEventGroupCreate>
    1dbc:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <egDisplay+0x1>
    1dc0:	80 93 44 06 	sts	0x0644, r24	; 0x800644 <egDisplay>
	bsCheck = xSemaphoreCreateBinary();
    1dc4:	43 e0       	ldi	r20, 0x03	; 3
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	0e 94 68 04 	call	0x8d0	; 0x8d0 <xQueueGenericCreate>
    1dce:	90 93 49 06 	sts	0x0649, r25	; 0x800649 <bsCheck+0x1>
    1dd2:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <bsCheck>

	/* tasks creation with different periorities */
	xTaskCreate(T_Display, 	 NULL, 200, NULL, 2, NULL);
    1dd6:	a1 2c       	mov	r10, r1
    1dd8:	b1 2c       	mov	r11, r1
    1dda:	c1 2c       	mov	r12, r1
    1ddc:	d1 2c       	mov	r13, r1
    1dde:	e1 2c       	mov	r14, r1
    1de0:	f1 2c       	mov	r15, r1
    1de2:	02 e0       	ldi	r16, 0x02	; 2
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	48 ec       	ldi	r20, 0xC8	; 200
    1dea:	50 e0       	ldi	r21, 0x00	; 0
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	70 e0       	ldi	r23, 0x00	; 0
    1df0:	8a ec       	ldi	r24, 0xCA	; 202
    1df2:	9c e0       	ldi	r25, 0x0C	; 12
    1df4:	0e 94 39 06 	call	0xc72	; 0xc72 <xTaskGenericCreate>
	xTaskCreate(T_Sensing, 	 NULL, 100,  NULL, 3, NULL);
    1df8:	03 e0       	ldi	r16, 0x03	; 3
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	44 e6       	ldi	r20, 0x64	; 100
    1e00:	50 e0       	ldi	r21, 0x00	; 0
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	70 e0       	ldi	r23, 0x00	; 0
    1e06:	8e e7       	ldi	r24, 0x7E	; 126
    1e08:	9c e0       	ldi	r25, 0x0C	; 12
    1e0a:	0e 94 39 06 	call	0xc72	; 0xc72 <xTaskGenericCreate>
	xTaskCreate(T_Terminal,  NULL, 150, NULL, 4, NULL);
    1e0e:	04 e0       	ldi	r16, 0x04	; 4
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	46 e9       	ldi	r20, 0x96	; 150
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	60 e0       	ldi	r22, 0x00	; 0
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	81 e4       	ldi	r24, 0x41	; 65
    1e1e:	9b e0       	ldi	r25, 0x0B	; 11
    1e20:	0e 94 39 06 	call	0xc72	; 0xc72 <xTaskGenericCreate>
	xTaskCreate(T_SysCheck,  NULL, 100,  NULL, 5, NULL);
    1e24:	05 e0       	ldi	r16, 0x05	; 5
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	44 e6       	ldi	r20, 0x64	; 100
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	60 e0       	ldi	r22, 0x00	; 0
    1e30:	70 e0       	ldi	r23, 0x00	; 0
    1e32:	83 ed       	ldi	r24, 0xD3	; 211
    1e34:	9a e0       	ldi	r25, 0x0A	; 10
    1e36:	0e 94 39 06 	call	0xc72	; 0xc72 <xTaskGenericCreate>
	xTaskCreate(T_Control,	 NULL, 150, NULL, 6, NULL);
    1e3a:	06 e0       	ldi	r16, 0x06	; 6
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	46 e9       	ldi	r20, 0x96	; 150
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	80 ea       	ldi	r24, 0xA0	; 160
    1e4a:	9a e0       	ldi	r25, 0x0A	; 10
    1e4c:	0e 94 39 06 	call	0xc72	; 0xc72 <xTaskGenericCreate>

	/* start scheduling */
	vTaskStartScheduler();
    1e50:	0e 94 4b 07 	call	0xe96	; 0xe96 <vTaskStartScheduler>
}
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	0f 91       	pop	r16
    1e5a:	ff 90       	pop	r15
    1e5c:	ef 90       	pop	r14
    1e5e:	df 90       	pop	r13
    1e60:	cf 90       	pop	r12
    1e62:	bf 90       	pop	r11
    1e64:	af 90       	pop	r10
    1e66:	08 95       	ret

00001e68 <LCD_sendCommand>:
    1e68:	95 98       	cbi	0x12, 5	; 18
    1e6a:	96 98       	cbi	0x12, 6	; 18
    1e6c:	ef ec       	ldi	r30, 0xCF	; 207
    1e6e:	f7 e0       	ldi	r31, 0x07	; 7
    1e70:	31 97       	sbiw	r30, 0x01	; 1
    1e72:	f1 f7       	brne	.-4      	; 0x1e70 <LCD_sendCommand+0x8>
    1e74:	00 c0       	rjmp	.+0      	; 0x1e76 <LCD_sendCommand+0xe>
    1e76:	00 00       	nop
    1e78:	97 9a       	sbi	0x12, 7	; 18
    1e7a:	ef ec       	ldi	r30, 0xCF	; 207
    1e7c:	f7 e0       	ldi	r31, 0x07	; 7
    1e7e:	31 97       	sbiw	r30, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_sendCommand+0x16>
    1e82:	00 c0       	rjmp	.+0      	; 0x1e84 <LCD_sendCommand+0x1c>
    1e84:	00 00       	nop
    1e86:	85 bb       	out	0x15, r24	; 21
    1e88:	8f ec       	ldi	r24, 0xCF	; 207
    1e8a:	97 e0       	ldi	r25, 0x07	; 7
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	f1 f7       	brne	.-4      	; 0x1e8c <LCD_sendCommand+0x24>
    1e90:	00 c0       	rjmp	.+0      	; 0x1e92 <LCD_sendCommand+0x2a>
    1e92:	00 00       	nop
    1e94:	97 98       	cbi	0x12, 7	; 18
    1e96:	ef ec       	ldi	r30, 0xCF	; 207
    1e98:	f7 e0       	ldi	r31, 0x07	; 7
    1e9a:	31 97       	sbiw	r30, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD_sendCommand+0x32>
    1e9e:	00 c0       	rjmp	.+0      	; 0x1ea0 <LCD_sendCommand+0x38>
    1ea0:	00 00       	nop
    1ea2:	08 95       	ret

00001ea4 <LCD_init>:
    1ea4:	81 b3       	in	r24, 0x11	; 17
    1ea6:	80 6e       	ori	r24, 0xE0	; 224
    1ea8:	81 bb       	out	0x11, r24	; 17
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	84 bb       	out	0x14, r24	; 20
    1eae:	88 e3       	ldi	r24, 0x38	; 56
    1eb0:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
    1eb4:	8c e0       	ldi	r24, 0x0C	; 12
    1eb6:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
    1ec0:	08 95       	ret

00001ec2 <LCD_displayCharacter>:
    1ec2:	95 9a       	sbi	0x12, 5	; 18
    1ec4:	96 98       	cbi	0x12, 6	; 18
    1ec6:	ef ec       	ldi	r30, 0xCF	; 207
    1ec8:	f7 e0       	ldi	r31, 0x07	; 7
    1eca:	31 97       	sbiw	r30, 0x01	; 1
    1ecc:	f1 f7       	brne	.-4      	; 0x1eca <LCD_displayCharacter+0x8>
    1ece:	00 c0       	rjmp	.+0      	; 0x1ed0 <LCD_displayCharacter+0xe>
    1ed0:	00 00       	nop
    1ed2:	97 9a       	sbi	0x12, 7	; 18
    1ed4:	ef ec       	ldi	r30, 0xCF	; 207
    1ed6:	f7 e0       	ldi	r31, 0x07	; 7
    1ed8:	31 97       	sbiw	r30, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_displayCharacter+0x16>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <LCD_displayCharacter+0x1c>
    1ede:	00 00       	nop
    1ee0:	85 bb       	out	0x15, r24	; 21
    1ee2:	8f ec       	ldi	r24, 0xCF	; 207
    1ee4:	97 e0       	ldi	r25, 0x07	; 7
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_displayCharacter+0x24>
    1eea:	00 c0       	rjmp	.+0      	; 0x1eec <LCD_displayCharacter+0x2a>
    1eec:	00 00       	nop
    1eee:	97 98       	cbi	0x12, 7	; 18
    1ef0:	ef ec       	ldi	r30, 0xCF	; 207
    1ef2:	f7 e0       	ldi	r31, 0x07	; 7
    1ef4:	31 97       	sbiw	r30, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_displayCharacter+0x32>
    1ef8:	00 c0       	rjmp	.+0      	; 0x1efa <LCD_displayCharacter+0x38>
    1efa:	00 00       	nop
    1efc:	08 95       	ret

00001efe <LCD_displayString>:
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	fc 01       	movw	r30, r24
    1f06:	80 81       	ld	r24, Z
    1f08:	88 23       	and	r24, r24
    1f0a:	59 f0       	breq	.+22     	; 0x1f22 <LCD_displayString+0x24>
    1f0c:	8f 01       	movw	r16, r30
    1f0e:	c0 e0       	ldi	r28, 0x00	; 0
    1f10:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <LCD_displayCharacter>
    1f14:	cf 5f       	subi	r28, 0xFF	; 255
    1f16:	f8 01       	movw	r30, r16
    1f18:	ec 0f       	add	r30, r28
    1f1a:	f1 1d       	adc	r31, r1
    1f1c:	80 81       	ld	r24, Z
    1f1e:	81 11       	cpse	r24, r1
    1f20:	f7 cf       	rjmp	.-18     	; 0x1f10 <LCD_displayString+0x12>
    1f22:	cf 91       	pop	r28
    1f24:	1f 91       	pop	r17
    1f26:	0f 91       	pop	r16
    1f28:	08 95       	ret

00001f2a <LCD_goToRowColumn>:
    1f2a:	81 30       	cpi	r24, 0x01	; 1
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <LCD_goToRowColumn+0x10>
    1f2e:	60 f0       	brcs	.+24     	; 0x1f48 <LCD_goToRowColumn+0x1e>
    1f30:	82 30       	cpi	r24, 0x02	; 2
    1f32:	29 f0       	breq	.+10     	; 0x1f3e <LCD_goToRowColumn+0x14>
    1f34:	83 30       	cpi	r24, 0x03	; 3
    1f36:	29 f0       	breq	.+10     	; 0x1f42 <LCD_goToRowColumn+0x18>
    1f38:	06 c0       	rjmp	.+12     	; 0x1f46 <LCD_goToRowColumn+0x1c>
    1f3a:	60 5c       	subi	r22, 0xC0	; 192
    1f3c:	05 c0       	rjmp	.+10     	; 0x1f48 <LCD_goToRowColumn+0x1e>
    1f3e:	6c 5e       	subi	r22, 0xEC	; 236
    1f40:	03 c0       	rjmp	.+6      	; 0x1f48 <LCD_goToRowColumn+0x1e>
    1f42:	6c 5a       	subi	r22, 0xAC	; 172
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <LCD_goToRowColumn+0x1e>
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	86 2f       	mov	r24, r22
    1f4a:	80 68       	ori	r24, 0x80	; 128
    1f4c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
    1f50:	08 95       	ret

00001f52 <LCD_intgerToString>:
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <LCD_intgerToString+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <LCD_intgerToString+0x8>
    1f5a:	00 d0       	rcall	.+0      	; 0x1f5c <LCD_intgerToString+0xa>
    1f5c:	cd b7       	in	r28, 0x3d	; 61
    1f5e:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
    1f60:	4a e0       	ldi	r20, 0x0A	; 10
    1f62:	be 01       	movw	r22, r28
    1f64:	6f 5f       	subi	r22, 0xFF	; 255
    1f66:	7f 4f       	sbci	r23, 0xFF	; 255
    1f68:	0e 94 ae 11 	call	0x235c	; 0x235c <__itoa_ncheck>
    1f6c:	ce 01       	movw	r24, r28
    1f6e:	01 96       	adiw	r24, 0x01	; 1
    1f70:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <LCD_displayString>
    1f74:	26 96       	adiw	r28, 0x06	; 6
    1f76:	0f b6       	in	r0, 0x3f	; 63
    1f78:	f8 94       	cli
    1f7a:	de bf       	out	0x3e, r29	; 62
    1f7c:	0f be       	out	0x3f, r0	; 63
    1f7e:	cd bf       	out	0x3d, r28	; 61
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <LCD_clearScreen>:
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_sendCommand>
    1f8c:	08 95       	ret

00001f8e <TEMP_u16_Read>:
    1f8e:	cf 93       	push	r28
    1f90:	df 93       	push	r29
    1f92:	ec 01       	movw	r28, r24
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	0e 94 13 10 	call	0x2026	; 0x2026 <ADC_readChannel>
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__floatunsisf>
    1fa4:	23 e3       	ldi	r18, 0x33	; 51
    1fa6:	33 e3       	ldi	r19, 0x33	; 51
    1fa8:	43 e4       	ldi	r20, 0x43	; 67
    1faa:	52 e4       	ldi	r21, 0x42	; 66
    1fac:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
    1fb0:	0e 94 4e 10 	call	0x209c	; 0x209c <__fixunssfsi>
    1fb4:	9b 01       	movw	r18, r22
    1fb6:	36 95       	lsr	r19
    1fb8:	27 95       	ror	r18
    1fba:	36 95       	lsr	r19
    1fbc:	27 95       	ror	r18
    1fbe:	ab e7       	ldi	r26, 0x7B	; 123
    1fc0:	b4 e1       	ldi	r27, 0x14	; 20
    1fc2:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__umulhisi3>
    1fc6:	96 95       	lsr	r25
    1fc8:	87 95       	ror	r24
    1fca:	99 83       	std	Y+1, r25	; 0x01
    1fcc:	88 83       	st	Y, r24
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	08 95       	ret

00001fd6 <Humit_u16_Read>:
    1fd6:	cf 93       	push	r28
    1fd8:	df 93       	push	r29
    1fda:	ec 01       	movw	r28, r24
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	0e 94 13 10 	call	0x2026	; 0x2026 <ADC_readChannel>
    1fe2:	bc 01       	movw	r22, r24
    1fe4:	80 e0       	ldi	r24, 0x00	; 0
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__floatunsisf>
    1fec:	23 e3       	ldi	r18, 0x33	; 51
    1fee:	33 e3       	ldi	r19, 0x33	; 51
    1ff0:	43 e4       	ldi	r20, 0x43	; 67
    1ff2:	52 e4       	ldi	r21, 0x42	; 66
    1ff4:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <__mulsf3>
    1ff8:	0e 94 4e 10 	call	0x209c	; 0x209c <__fixunssfsi>
    1ffc:	9b 01       	movw	r18, r22
    1ffe:	36 95       	lsr	r19
    2000:	27 95       	ror	r18
    2002:	36 95       	lsr	r19
    2004:	27 95       	ror	r18
    2006:	ab e7       	ldi	r26, 0x7B	; 123
    2008:	b4 e1       	ldi	r27, 0x14	; 20
    200a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <__umulhisi3>
    200e:	96 95       	lsr	r25
    2010:	87 95       	ror	r24
    2012:	99 83       	std	Y+1, r25	; 0x01
    2014:	88 83       	st	Y, r24
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	08 95       	ret

0000201e <ADC_init>:
    201e:	17 b8       	out	0x07, r1	; 7
    2020:	86 e8       	ldi	r24, 0x86	; 134
    2022:	86 b9       	out	0x06, r24	; 6
    2024:	08 95       	ret

00002026 <ADC_readChannel>:
    2026:	97 b1       	in	r25, 0x07	; 7
    2028:	90 7e       	andi	r25, 0xE0	; 224
    202a:	97 b9       	out	0x07, r25	; 7
    202c:	97 b1       	in	r25, 0x07	; 7
    202e:	87 70       	andi	r24, 0x07	; 7
    2030:	98 2b       	or	r25, r24
    2032:	97 b9       	out	0x07, r25	; 7
    2034:	36 9a       	sbi	0x06, 6	; 6
    2036:	34 9b       	sbis	0x06, 4	; 6
    2038:	fe cf       	rjmp	.-4      	; 0x2036 <ADC_readChannel+0x10>
    203a:	34 9a       	sbi	0x06, 4	; 6
    203c:	84 b1       	in	r24, 0x04	; 4
    203e:	95 b1       	in	r25, 0x05	; 5
    2040:	08 95       	ret

00002042 <UART_init>:
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	8b b9       	out	0x0b, r24	; 11
    2046:	88 e1       	ldi	r24, 0x18	; 24
    2048:	8a b9       	out	0x0a, r24	; 10
    204a:	86 e8       	ldi	r24, 0x86	; 134
    204c:	80 bd       	out	0x20, r24	; 32
    204e:	10 bc       	out	0x20, r1	; 32
    2050:	87 e6       	ldi	r24, 0x67	; 103
    2052:	89 b9       	out	0x09, r24	; 9
    2054:	08 95       	ret

00002056 <UART_sendByte>:
    2056:	5d 9b       	sbis	0x0b, 5	; 11
    2058:	fe cf       	rjmp	.-4      	; 0x2056 <UART_sendByte>
    205a:	8c b9       	out	0x0c, r24	; 12
    205c:	08 95       	ret

0000205e <UART_receiveByte_NonBlocking>:
    205e:	5f 9b       	sbis	0x0b, 7	; 11
    2060:	05 c0       	rjmp	.+10     	; 0x206c <UART_receiveByte_NonBlocking+0xe>
    2062:	2c b1       	in	r18, 0x0c	; 12
    2064:	fc 01       	movw	r30, r24
    2066:	20 83       	st	Z, r18
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	08 95       	ret
    206c:	82 e0       	ldi	r24, 0x02	; 2
    206e:	08 95       	ret

00002070 <UART_sendString>:
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	fc 01       	movw	r30, r24
    2078:	80 81       	ld	r24, Z
    207a:	88 23       	and	r24, r24
    207c:	59 f0       	breq	.+22     	; 0x2094 <UART_sendString+0x24>
    207e:	8f 01       	movw	r16, r30
    2080:	c0 e0       	ldi	r28, 0x00	; 0
    2082:	0e 94 2b 10 	call	0x2056	; 0x2056 <UART_sendByte>
    2086:	cf 5f       	subi	r28, 0xFF	; 255
    2088:	f8 01       	movw	r30, r16
    208a:	ec 0f       	add	r30, r28
    208c:	f1 1d       	adc	r31, r1
    208e:	80 81       	ld	r24, Z
    2090:	81 11       	cpse	r24, r1
    2092:	f7 cf       	rjmp	.-18     	; 0x2082 <UART_sendString+0x12>
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <__fixunssfsi>:
    209c:	0e 94 c2 10 	call	0x2184	; 0x2184 <__fp_splitA>
    20a0:	88 f0       	brcs	.+34     	; 0x20c4 <__fixunssfsi+0x28>
    20a2:	9f 57       	subi	r25, 0x7F	; 127
    20a4:	98 f0       	brcs	.+38     	; 0x20cc <__fixunssfsi+0x30>
    20a6:	b9 2f       	mov	r27, r25
    20a8:	99 27       	eor	r25, r25
    20aa:	b7 51       	subi	r27, 0x17	; 23
    20ac:	b0 f0       	brcs	.+44     	; 0x20da <__fixunssfsi+0x3e>
    20ae:	e1 f0       	breq	.+56     	; 0x20e8 <__fixunssfsi+0x4c>
    20b0:	66 0f       	add	r22, r22
    20b2:	77 1f       	adc	r23, r23
    20b4:	88 1f       	adc	r24, r24
    20b6:	99 1f       	adc	r25, r25
    20b8:	1a f0       	brmi	.+6      	; 0x20c0 <__fixunssfsi+0x24>
    20ba:	ba 95       	dec	r27
    20bc:	c9 f7       	brne	.-14     	; 0x20b0 <__fixunssfsi+0x14>
    20be:	14 c0       	rjmp	.+40     	; 0x20e8 <__fixunssfsi+0x4c>
    20c0:	b1 30       	cpi	r27, 0x01	; 1
    20c2:	91 f0       	breq	.+36     	; 0x20e8 <__fixunssfsi+0x4c>
    20c4:	0e 94 dc 10 	call	0x21b8	; 0x21b8 <__fp_zero>
    20c8:	b1 e0       	ldi	r27, 0x01	; 1
    20ca:	08 95       	ret
    20cc:	0c 94 dc 10 	jmp	0x21b8	; 0x21b8 <__fp_zero>
    20d0:	67 2f       	mov	r22, r23
    20d2:	78 2f       	mov	r23, r24
    20d4:	88 27       	eor	r24, r24
    20d6:	b8 5f       	subi	r27, 0xF8	; 248
    20d8:	39 f0       	breq	.+14     	; 0x20e8 <__fixunssfsi+0x4c>
    20da:	b9 3f       	cpi	r27, 0xF9	; 249
    20dc:	cc f3       	brlt	.-14     	; 0x20d0 <__fixunssfsi+0x34>
    20de:	86 95       	lsr	r24
    20e0:	77 95       	ror	r23
    20e2:	67 95       	ror	r22
    20e4:	b3 95       	inc	r27
    20e6:	d9 f7       	brne	.-10     	; 0x20de <__fixunssfsi+0x42>
    20e8:	3e f4       	brtc	.+14     	; 0x20f8 <__fixunssfsi+0x5c>
    20ea:	90 95       	com	r25
    20ec:	80 95       	com	r24
    20ee:	70 95       	com	r23
    20f0:	61 95       	neg	r22
    20f2:	7f 4f       	sbci	r23, 0xFF	; 255
    20f4:	8f 4f       	sbci	r24, 0xFF	; 255
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	08 95       	ret

000020fa <__floatunsisf>:
    20fa:	e8 94       	clt
    20fc:	09 c0       	rjmp	.+18     	; 0x2110 <__floatsisf+0x12>

000020fe <__floatsisf>:
    20fe:	97 fb       	bst	r25, 7
    2100:	3e f4       	brtc	.+14     	; 0x2110 <__floatsisf+0x12>
    2102:	90 95       	com	r25
    2104:	80 95       	com	r24
    2106:	70 95       	com	r23
    2108:	61 95       	neg	r22
    210a:	7f 4f       	sbci	r23, 0xFF	; 255
    210c:	8f 4f       	sbci	r24, 0xFF	; 255
    210e:	9f 4f       	sbci	r25, 0xFF	; 255
    2110:	99 23       	and	r25, r25
    2112:	a9 f0       	breq	.+42     	; 0x213e <__floatsisf+0x40>
    2114:	f9 2f       	mov	r31, r25
    2116:	96 e9       	ldi	r25, 0x96	; 150
    2118:	bb 27       	eor	r27, r27
    211a:	93 95       	inc	r25
    211c:	f6 95       	lsr	r31
    211e:	87 95       	ror	r24
    2120:	77 95       	ror	r23
    2122:	67 95       	ror	r22
    2124:	b7 95       	ror	r27
    2126:	f1 11       	cpse	r31, r1
    2128:	f8 cf       	rjmp	.-16     	; 0x211a <__floatsisf+0x1c>
    212a:	fa f4       	brpl	.+62     	; 0x216a <__floatsisf+0x6c>
    212c:	bb 0f       	add	r27, r27
    212e:	11 f4       	brne	.+4      	; 0x2134 <__floatsisf+0x36>
    2130:	60 ff       	sbrs	r22, 0
    2132:	1b c0       	rjmp	.+54     	; 0x216a <__floatsisf+0x6c>
    2134:	6f 5f       	subi	r22, 0xFF	; 255
    2136:	7f 4f       	sbci	r23, 0xFF	; 255
    2138:	8f 4f       	sbci	r24, 0xFF	; 255
    213a:	9f 4f       	sbci	r25, 0xFF	; 255
    213c:	16 c0       	rjmp	.+44     	; 0x216a <__floatsisf+0x6c>
    213e:	88 23       	and	r24, r24
    2140:	11 f0       	breq	.+4      	; 0x2146 <__floatsisf+0x48>
    2142:	96 e9       	ldi	r25, 0x96	; 150
    2144:	11 c0       	rjmp	.+34     	; 0x2168 <__floatsisf+0x6a>
    2146:	77 23       	and	r23, r23
    2148:	21 f0       	breq	.+8      	; 0x2152 <__floatsisf+0x54>
    214a:	9e e8       	ldi	r25, 0x8E	; 142
    214c:	87 2f       	mov	r24, r23
    214e:	76 2f       	mov	r23, r22
    2150:	05 c0       	rjmp	.+10     	; 0x215c <__floatsisf+0x5e>
    2152:	66 23       	and	r22, r22
    2154:	71 f0       	breq	.+28     	; 0x2172 <__floatsisf+0x74>
    2156:	96 e8       	ldi	r25, 0x86	; 134
    2158:	86 2f       	mov	r24, r22
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	60 e0       	ldi	r22, 0x00	; 0
    215e:	2a f0       	brmi	.+10     	; 0x216a <__floatsisf+0x6c>
    2160:	9a 95       	dec	r25
    2162:	66 0f       	add	r22, r22
    2164:	77 1f       	adc	r23, r23
    2166:	88 1f       	adc	r24, r24
    2168:	da f7       	brpl	.-10     	; 0x2160 <__floatsisf+0x62>
    216a:	88 0f       	add	r24, r24
    216c:	96 95       	lsr	r25
    216e:	87 95       	ror	r24
    2170:	97 f9       	bld	r25, 7
    2172:	08 95       	ret

00002174 <__fp_split3>:
    2174:	57 fd       	sbrc	r21, 7
    2176:	90 58       	subi	r25, 0x80	; 128
    2178:	44 0f       	add	r20, r20
    217a:	55 1f       	adc	r21, r21
    217c:	59 f0       	breq	.+22     	; 0x2194 <__fp_splitA+0x10>
    217e:	5f 3f       	cpi	r21, 0xFF	; 255
    2180:	71 f0       	breq	.+28     	; 0x219e <__fp_splitA+0x1a>
    2182:	47 95       	ror	r20

00002184 <__fp_splitA>:
    2184:	88 0f       	add	r24, r24
    2186:	97 fb       	bst	r25, 7
    2188:	99 1f       	adc	r25, r25
    218a:	61 f0       	breq	.+24     	; 0x21a4 <__fp_splitA+0x20>
    218c:	9f 3f       	cpi	r25, 0xFF	; 255
    218e:	79 f0       	breq	.+30     	; 0x21ae <__fp_splitA+0x2a>
    2190:	87 95       	ror	r24
    2192:	08 95       	ret
    2194:	12 16       	cp	r1, r18
    2196:	13 06       	cpc	r1, r19
    2198:	14 06       	cpc	r1, r20
    219a:	55 1f       	adc	r21, r21
    219c:	f2 cf       	rjmp	.-28     	; 0x2182 <__fp_split3+0xe>
    219e:	46 95       	lsr	r20
    21a0:	f1 df       	rcall	.-30     	; 0x2184 <__fp_splitA>
    21a2:	08 c0       	rjmp	.+16     	; 0x21b4 <__fp_splitA+0x30>
    21a4:	16 16       	cp	r1, r22
    21a6:	17 06       	cpc	r1, r23
    21a8:	18 06       	cpc	r1, r24
    21aa:	99 1f       	adc	r25, r25
    21ac:	f1 cf       	rjmp	.-30     	; 0x2190 <__fp_splitA+0xc>
    21ae:	86 95       	lsr	r24
    21b0:	71 05       	cpc	r23, r1
    21b2:	61 05       	cpc	r22, r1
    21b4:	08 94       	sec
    21b6:	08 95       	ret

000021b8 <__fp_zero>:
    21b8:	e8 94       	clt

000021ba <__fp_szero>:
    21ba:	bb 27       	eor	r27, r27
    21bc:	66 27       	eor	r22, r22
    21be:	77 27       	eor	r23, r23
    21c0:	cb 01       	movw	r24, r22
    21c2:	97 f9       	bld	r25, 7
    21c4:	08 95       	ret

000021c6 <__mulsf3>:
    21c6:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__mulsf3x>
    21ca:	0c 94 67 11 	jmp	0x22ce	; 0x22ce <__fp_round>
    21ce:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__fp_pscA>
    21d2:	38 f0       	brcs	.+14     	; 0x21e2 <__mulsf3+0x1c>
    21d4:	0e 94 60 11 	call	0x22c0	; 0x22c0 <__fp_pscB>
    21d8:	20 f0       	brcs	.+8      	; 0x21e2 <__mulsf3+0x1c>
    21da:	95 23       	and	r25, r21
    21dc:	11 f0       	breq	.+4      	; 0x21e2 <__mulsf3+0x1c>
    21de:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>
    21e2:	0c 94 56 11 	jmp	0x22ac	; 0x22ac <__fp_nan>
    21e6:	11 24       	eor	r1, r1
    21e8:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__fp_szero>

000021ec <__mulsf3x>:
    21ec:	0e 94 ba 10 	call	0x2174	; 0x2174 <__fp_split3>
    21f0:	70 f3       	brcs	.-36     	; 0x21ce <__mulsf3+0x8>

000021f2 <__mulsf3_pse>:
    21f2:	95 9f       	mul	r25, r21
    21f4:	c1 f3       	breq	.-16     	; 0x21e6 <__mulsf3+0x20>
    21f6:	95 0f       	add	r25, r21
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	55 1f       	adc	r21, r21
    21fc:	62 9f       	mul	r22, r18
    21fe:	f0 01       	movw	r30, r0
    2200:	72 9f       	mul	r23, r18
    2202:	bb 27       	eor	r27, r27
    2204:	f0 0d       	add	r31, r0
    2206:	b1 1d       	adc	r27, r1
    2208:	63 9f       	mul	r22, r19
    220a:	aa 27       	eor	r26, r26
    220c:	f0 0d       	add	r31, r0
    220e:	b1 1d       	adc	r27, r1
    2210:	aa 1f       	adc	r26, r26
    2212:	64 9f       	mul	r22, r20
    2214:	66 27       	eor	r22, r22
    2216:	b0 0d       	add	r27, r0
    2218:	a1 1d       	adc	r26, r1
    221a:	66 1f       	adc	r22, r22
    221c:	82 9f       	mul	r24, r18
    221e:	22 27       	eor	r18, r18
    2220:	b0 0d       	add	r27, r0
    2222:	a1 1d       	adc	r26, r1
    2224:	62 1f       	adc	r22, r18
    2226:	73 9f       	mul	r23, r19
    2228:	b0 0d       	add	r27, r0
    222a:	a1 1d       	adc	r26, r1
    222c:	62 1f       	adc	r22, r18
    222e:	83 9f       	mul	r24, r19
    2230:	a0 0d       	add	r26, r0
    2232:	61 1d       	adc	r22, r1
    2234:	22 1f       	adc	r18, r18
    2236:	74 9f       	mul	r23, r20
    2238:	33 27       	eor	r19, r19
    223a:	a0 0d       	add	r26, r0
    223c:	61 1d       	adc	r22, r1
    223e:	23 1f       	adc	r18, r19
    2240:	84 9f       	mul	r24, r20
    2242:	60 0d       	add	r22, r0
    2244:	21 1d       	adc	r18, r1
    2246:	82 2f       	mov	r24, r18
    2248:	76 2f       	mov	r23, r22
    224a:	6a 2f       	mov	r22, r26
    224c:	11 24       	eor	r1, r1
    224e:	9f 57       	subi	r25, 0x7F	; 127
    2250:	50 40       	sbci	r21, 0x00	; 0
    2252:	9a f0       	brmi	.+38     	; 0x227a <__mulsf3_pse+0x88>
    2254:	f1 f0       	breq	.+60     	; 0x2292 <__mulsf3_pse+0xa0>
    2256:	88 23       	and	r24, r24
    2258:	4a f0       	brmi	.+18     	; 0x226c <__mulsf3_pse+0x7a>
    225a:	ee 0f       	add	r30, r30
    225c:	ff 1f       	adc	r31, r31
    225e:	bb 1f       	adc	r27, r27
    2260:	66 1f       	adc	r22, r22
    2262:	77 1f       	adc	r23, r23
    2264:	88 1f       	adc	r24, r24
    2266:	91 50       	subi	r25, 0x01	; 1
    2268:	50 40       	sbci	r21, 0x00	; 0
    226a:	a9 f7       	brne	.-22     	; 0x2256 <__mulsf3_pse+0x64>
    226c:	9e 3f       	cpi	r25, 0xFE	; 254
    226e:	51 05       	cpc	r21, r1
    2270:	80 f0       	brcs	.+32     	; 0x2292 <__mulsf3_pse+0xa0>
    2272:	0c 94 50 11 	jmp	0x22a0	; 0x22a0 <__fp_inf>
    2276:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__fp_szero>
    227a:	5f 3f       	cpi	r21, 0xFF	; 255
    227c:	e4 f3       	brlt	.-8      	; 0x2276 <__mulsf3_pse+0x84>
    227e:	98 3e       	cpi	r25, 0xE8	; 232
    2280:	d4 f3       	brlt	.-12     	; 0x2276 <__mulsf3_pse+0x84>
    2282:	86 95       	lsr	r24
    2284:	77 95       	ror	r23
    2286:	67 95       	ror	r22
    2288:	b7 95       	ror	r27
    228a:	f7 95       	ror	r31
    228c:	e7 95       	ror	r30
    228e:	9f 5f       	subi	r25, 0xFF	; 255
    2290:	c1 f7       	brne	.-16     	; 0x2282 <__mulsf3_pse+0x90>
    2292:	fe 2b       	or	r31, r30
    2294:	88 0f       	add	r24, r24
    2296:	91 1d       	adc	r25, r1
    2298:	96 95       	lsr	r25
    229a:	87 95       	ror	r24
    229c:	97 f9       	bld	r25, 7
    229e:	08 95       	ret

000022a0 <__fp_inf>:
    22a0:	97 f9       	bld	r25, 7
    22a2:	9f 67       	ori	r25, 0x7F	; 127
    22a4:	80 e8       	ldi	r24, 0x80	; 128
    22a6:	70 e0       	ldi	r23, 0x00	; 0
    22a8:	60 e0       	ldi	r22, 0x00	; 0
    22aa:	08 95       	ret

000022ac <__fp_nan>:
    22ac:	9f ef       	ldi	r25, 0xFF	; 255
    22ae:	80 ec       	ldi	r24, 0xC0	; 192
    22b0:	08 95       	ret

000022b2 <__fp_pscA>:
    22b2:	00 24       	eor	r0, r0
    22b4:	0a 94       	dec	r0
    22b6:	16 16       	cp	r1, r22
    22b8:	17 06       	cpc	r1, r23
    22ba:	18 06       	cpc	r1, r24
    22bc:	09 06       	cpc	r0, r25
    22be:	08 95       	ret

000022c0 <__fp_pscB>:
    22c0:	00 24       	eor	r0, r0
    22c2:	0a 94       	dec	r0
    22c4:	12 16       	cp	r1, r18
    22c6:	13 06       	cpc	r1, r19
    22c8:	14 06       	cpc	r1, r20
    22ca:	05 06       	cpc	r0, r21
    22cc:	08 95       	ret

000022ce <__fp_round>:
    22ce:	09 2e       	mov	r0, r25
    22d0:	03 94       	inc	r0
    22d2:	00 0c       	add	r0, r0
    22d4:	11 f4       	brne	.+4      	; 0x22da <__fp_round+0xc>
    22d6:	88 23       	and	r24, r24
    22d8:	52 f0       	brmi	.+20     	; 0x22ee <__fp_round+0x20>
    22da:	bb 0f       	add	r27, r27
    22dc:	40 f4       	brcc	.+16     	; 0x22ee <__fp_round+0x20>
    22de:	bf 2b       	or	r27, r31
    22e0:	11 f4       	brne	.+4      	; 0x22e6 <__fp_round+0x18>
    22e2:	60 ff       	sbrs	r22, 0
    22e4:	04 c0       	rjmp	.+8      	; 0x22ee <__fp_round+0x20>
    22e6:	6f 5f       	subi	r22, 0xFF	; 255
    22e8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ea:	8f 4f       	sbci	r24, 0xFF	; 255
    22ec:	9f 4f       	sbci	r25, 0xFF	; 255
    22ee:	08 95       	ret

000022f0 <__umulhisi3>:
    22f0:	a2 9f       	mul	r26, r18
    22f2:	b0 01       	movw	r22, r0
    22f4:	b3 9f       	mul	r27, r19
    22f6:	c0 01       	movw	r24, r0
    22f8:	a3 9f       	mul	r26, r19
    22fa:	70 0d       	add	r23, r0
    22fc:	81 1d       	adc	r24, r1
    22fe:	11 24       	eor	r1, r1
    2300:	91 1d       	adc	r25, r1
    2302:	b2 9f       	mul	r27, r18
    2304:	70 0d       	add	r23, r0
    2306:	81 1d       	adc	r24, r1
    2308:	11 24       	eor	r1, r1
    230a:	91 1d       	adc	r25, r1
    230c:	08 95       	ret

0000230e <atoi>:
    230e:	fc 01       	movw	r30, r24
    2310:	88 27       	eor	r24, r24
    2312:	99 27       	eor	r25, r25
    2314:	e8 94       	clt
    2316:	21 91       	ld	r18, Z+
    2318:	20 32       	cpi	r18, 0x20	; 32
    231a:	e9 f3       	breq	.-6      	; 0x2316 <atoi+0x8>
    231c:	29 30       	cpi	r18, 0x09	; 9
    231e:	10 f0       	brcs	.+4      	; 0x2324 <atoi+0x16>
    2320:	2e 30       	cpi	r18, 0x0E	; 14
    2322:	c8 f3       	brcs	.-14     	; 0x2316 <atoi+0x8>
    2324:	2b 32       	cpi	r18, 0x2B	; 43
    2326:	41 f0       	breq	.+16     	; 0x2338 <atoi+0x2a>
    2328:	2d 32       	cpi	r18, 0x2D	; 45
    232a:	39 f4       	brne	.+14     	; 0x233a <atoi+0x2c>
    232c:	68 94       	set
    232e:	04 c0       	rjmp	.+8      	; 0x2338 <atoi+0x2a>
    2330:	0e 94 b9 11 	call	0x2372	; 0x2372 <__mulhi_const_10>
    2334:	82 0f       	add	r24, r18
    2336:	91 1d       	adc	r25, r1
    2338:	21 91       	ld	r18, Z+
    233a:	20 53       	subi	r18, 0x30	; 48
    233c:	2a 30       	cpi	r18, 0x0A	; 10
    233e:	c0 f3       	brcs	.-16     	; 0x2330 <atoi+0x22>
    2340:	1e f4       	brtc	.+6      	; 0x2348 <atoi+0x3a>
    2342:	90 95       	com	r25
    2344:	81 95       	neg	r24
    2346:	9f 4f       	sbci	r25, 0xFF	; 255
    2348:	08 95       	ret

0000234a <memcpy>:
    234a:	fb 01       	movw	r30, r22
    234c:	dc 01       	movw	r26, r24
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <memcpy+0xa>
    2350:	01 90       	ld	r0, Z+
    2352:	0d 92       	st	X+, r0
    2354:	41 50       	subi	r20, 0x01	; 1
    2356:	50 40       	sbci	r21, 0x00	; 0
    2358:	d8 f7       	brcc	.-10     	; 0x2350 <memcpy+0x6>
    235a:	08 95       	ret

0000235c <__itoa_ncheck>:
    235c:	bb 27       	eor	r27, r27
    235e:	4a 30       	cpi	r20, 0x0A	; 10
    2360:	31 f4       	brne	.+12     	; 0x236e <__itoa_ncheck+0x12>
    2362:	99 23       	and	r25, r25
    2364:	22 f4       	brpl	.+8      	; 0x236e <__itoa_ncheck+0x12>
    2366:	bd e2       	ldi	r27, 0x2D	; 45
    2368:	90 95       	com	r25
    236a:	81 95       	neg	r24
    236c:	9f 4f       	sbci	r25, 0xFF	; 255
    236e:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__utoa_common>

00002372 <__mulhi_const_10>:
    2372:	7a e0       	ldi	r23, 0x0A	; 10
    2374:	97 9f       	mul	r25, r23
    2376:	90 2d       	mov	r25, r0
    2378:	87 9f       	mul	r24, r23
    237a:	80 2d       	mov	r24, r0
    237c:	91 0d       	add	r25, r1
    237e:	11 24       	eor	r1, r1
    2380:	08 95       	ret

00002382 <__utoa_ncheck>:
    2382:	bb 27       	eor	r27, r27

00002384 <__utoa_common>:
    2384:	fb 01       	movw	r30, r22
    2386:	55 27       	eor	r21, r21
    2388:	aa 27       	eor	r26, r26
    238a:	88 0f       	add	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	aa 1f       	adc	r26, r26
    2390:	a4 17       	cp	r26, r20
    2392:	10 f0       	brcs	.+4      	; 0x2398 <__utoa_common+0x14>
    2394:	a4 1b       	sub	r26, r20
    2396:	83 95       	inc	r24
    2398:	50 51       	subi	r21, 0x10	; 16
    239a:	b9 f7       	brne	.-18     	; 0x238a <__utoa_common+0x6>
    239c:	a0 5d       	subi	r26, 0xD0	; 208
    239e:	aa 33       	cpi	r26, 0x3A	; 58
    23a0:	08 f0       	brcs	.+2      	; 0x23a4 <__utoa_common+0x20>
    23a2:	a9 5d       	subi	r26, 0xD9	; 217
    23a4:	a1 93       	st	Z+, r26
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	79 f7       	brne	.-34     	; 0x2388 <__utoa_common+0x4>
    23aa:	b1 11       	cpse	r27, r1
    23ac:	b1 93       	st	Z+, r27
    23ae:	11 92       	st	Z+, r1
    23b0:	cb 01       	movw	r24, r22
    23b2:	0c 94 db 11 	jmp	0x23b6	; 0x23b6 <strrev>

000023b6 <strrev>:
    23b6:	dc 01       	movw	r26, r24
    23b8:	fc 01       	movw	r30, r24
    23ba:	67 2f       	mov	r22, r23
    23bc:	71 91       	ld	r23, Z+
    23be:	77 23       	and	r23, r23
    23c0:	e1 f7       	brne	.-8      	; 0x23ba <strrev+0x4>
    23c2:	32 97       	sbiw	r30, 0x02	; 2
    23c4:	04 c0       	rjmp	.+8      	; 0x23ce <strrev+0x18>
    23c6:	7c 91       	ld	r23, X
    23c8:	6d 93       	st	X+, r22
    23ca:	70 83       	st	Z, r23
    23cc:	62 91       	ld	r22, -Z
    23ce:	ae 17       	cp	r26, r30
    23d0:	bf 07       	cpc	r27, r31
    23d2:	c8 f3       	brcs	.-14     	; 0x23c6 <strrev+0x10>
    23d4:	08 95       	ret

000023d6 <_exit>:
    23d6:	f8 94       	cli

000023d8 <__stop_program>:
    23d8:	ff cf       	rjmp	.-2      	; 0x23d8 <__stop_program>
